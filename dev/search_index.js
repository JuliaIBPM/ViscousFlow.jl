var documenterSearchIndex = {"docs":
[{"location":"manual/navierstokes/#Navier-Stokes-systems","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"","category":"section"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"DocTestSetup = quote\nusing ViscousFlow\nend","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"defddt1fracmathrmd1mathrmdt\n\nrenewcommandvecboldsymbol\nnewcommanduvec1vechat1\nnewcommandutangentuvectau\nnewcommandunormaluvecn\n\nrenewcommanddmathrmd","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"using ViscousFlow\nusing Plots","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Here, we will focus on putting tools together from the previous sections in order to set up and solve the Navier-Stokes system of equations. First, we will solve them in a completely unbounded domain (i.e., no bodies), and then we will solve them in the vicinity of a body.","category":"page"},{"location":"manual/navierstokes/#Navier-Stokes-without-a-body","page":"Navier-Stokes systems","title":"Navier-Stokes without a body","text":"","category":"section"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Here, we seek the solve the two-dimensional incompressible Navier-Stokes equations in their discrete vorticity form, in an unbounded domain:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"ddt w + N(vw) = frac1Re L w","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"along with the initial condition","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"w(0) = w_0","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The field w represents the discrete vorticity, which sits at the nodes of the dual cells. The velocity, v, lies on the edges of the primal cells. They are related to each other by v = Cs, where s = -L^-1 w is the discrete streamfunction.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The second term on the left-hand side is the convective term, which we have simply written as N(vw). There are several ways to write this term; here, we will write it by using the discrete divergence,","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"N(vw) = D(vw)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The package has a function that is set up to compute this term; we will discuss it below. The right-hand side contains the viscous term, proportional to 1Re, where Re is the Reynolds number. For this, we will use the integrating factor. For purposes of calculation, it is better to express the problem as","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"ddt w - frac1Re L w = r_1(w)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"where r_1(w) = -D(vw).","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"For demonstration, we will solve a problem consisting initially of two identical circular patches of vorticity.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"using ViscousFlow\nusing Plots\npyplot()","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The first thing we must do is set up a grid. We will make it square, with spacing equal to 0.02 in each cell.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"xlim = (-2,2); ylim = (-2,2);\nΔx = 0.02;","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we will set the Reynolds number, and set the time step size so that it follows the so-called CFL condition (with CFL number set to 0.5). To be careful, we also make sure the time step size does not exceed a threshold in the grid Fourier number (also set to 0.5):","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Re = 200\nΔt = min(0.5*Δx,0.5*Δx^2*Re)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we set up the Navier-Stokes system. This sets the rest of the grid parameters, (number of cells, etc), and creates some some buffer space on the grid.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"For example, to check how many dual grid cells we have, we can use the size function, which has been extended to such systems:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"size(sys)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Let's set up a set of dual nodes on this grid:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"w₀ = Nodes(Dual,size(sys));","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The physical grid coordinates of these dual nodes can be generated with the coordinates function:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"xg, yg = coordinates(w₀,dx=cellsize(sys),I0=origin(sys))","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we are ready to set up the integrator for this problem. To account for the viscous diffusion, we need the integrating factor. There are no body constraints to enforce, so we will use the integrating factor Runge-Kutta method (IFRK). For this, we need to set up plans for the integrating factor and for the right-hand side (r_1). The package has functions that do both for us, using the system data in sys. We just need to change their argument list so that they fit the template for the IFRK scheme:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plan_intfact(t,w) = CartesianGrids.plan_intfact(t,w,sys)\nr₁(w,t) = ConstrainedSystems.r₁(w,t,sys)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we can construct the integrator. We will use 3rd-order Runge-Kutta:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"ifrk = IFRK(w₀,sys.Δt,plan_intfact,r₁,rk=ConstrainedSystems.RK31)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Note that we have only passed in w₀ to this scheme to provide the form of data to be used for the state vector in the integrator. It does not matter that the data are still zeros.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Finally we are ready to solve the problem. We set up the initial condition. It is helpful to define a function first that specifies the vorticity distribution in each vortex patch. We will use a Gaussian:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"using LinearAlgebra\ngaussian(x,x0,σ) = exp(-LinearAlgebra.norm(x.-x0)^2/σ^2)/(π*σ^2)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now the initial conditions. We will put one vortex at (-050) and the other at (050). They will each have a strength of 1 and a radius of 02. (Reynolds number is implicitly defined in this problem as Gammanu, where nu is the kinematic viscosity. So there is no point in changing the strength; only the Reynolds number need be varied to explore different mixes of convective and diffusive transport.)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"t = 0.0\nx01 = (-0.5,0); x02 = (0.5,0); σ = 0.2; Γ = 1\nw₀ .= Δx*[Γ*gaussian((x,y),x01,σ) + Γ*gaussian((x,y),x02,σ) for x in xg, y in yg];\nw = deepcopy(w₀);","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Note that we have multiplied the vorticity vector by the grid spacing. This is because the vector w is not actually the vorticity, but rather, a grid vorticity related to velocity through differencing. Let's plot it to see what we are starting with:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plot(xg,yg,w)\nsavefig(\"w0corotate.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"We will integrate the problem for 1 time unit:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"tf = 1\nT = 0:Δt:tf","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now, do it. We will time it to see how long it takes:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"@time for ti in T\n    global t, w = ifrk(t,w)\nend","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"and plot it again:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plot(xg,yg,w)\nsavefig(\"w1corotate.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Let's go further!","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"tf = 6\nT = 0:Δt:tf\n@time for ti in T\n    global t, w = ifrk(t,w)\nend","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plot(xg,yg,w)\nsavefig(\"w2corotate.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/#Navier-Stokes-with-a-body","page":"Navier-Stokes systems","title":"Navier-Stokes with a body","text":"","category":"section"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now let's solve for flow past a body. We will solve for the flow past a circular cylinder, a canonical problem in fluid dynamics.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"using ViscousFlow\nusing Plots\npyplot()","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"We will start by constructing the body points,","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"n = 100;\nbody = Circle(0.5,n)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"We will leave it at the origin. However, to show how we can place it in different orientations, we will construct a rigid-body transformation for demonstration:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"cent = (0.0,0.0)\nα = 0.0\nT! = RigidTransform(cent,α)\nT!(body)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we construct the grid. This time, we will make the grid longer, so that it can resolve part of the wake. (The cylinder will be placed at)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"xlim = (-1,3); ylim = (-1,1);\nΔx = 0.02;","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Let's plot this to see its placement in the domain","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plot(body,xlim=xlim,ylim=ylim)\nsavefig(\"cyl0.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we will set the Reynolds number and free stream velocity. Since the problem is scaled by the free stream velocity, we need only set the speed to 1.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Re = 200\nU = 1.0;\nU∞ = (U,0.0)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Set the time step size with the usual CFL condition:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Δt = min(0.5*Δx,0.5*Δx^2*Re)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now set up the body point coordinates in a vector data structure. If we had more than one body, we would assemble all of the bodies' points into this same vector.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"X = VectorData(body.x,body.y);","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Create the Navier-Stokes system:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt,U∞ = U∞, X̃ = X, isstore = true)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now set up the basic data structures for use in the problem.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"w₀ = Nodes(Dual,size(sys));\nf = VectorData(X);","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The cylinder flow remains symmetric unless it is explicitly perturbed. We will do this by applying a point perturbation directly in the vorticity, over a short interval centered at t = 4.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"xf = (1.5,0.0);\nFf = 10.0;\nt0 = 4.0; σ = 1.0;\nwforce = PointForce(w₀,xf,Ff,t0,σ,sys)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we can set up the integrator. For this, we use IFHERK, since we need both the integrating factor and the constraint applications. We use ready-made functions for each of these. For the right-hand side of the Navier-Stokes equations r₁, we add the point force at time t.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plan_intfact(t,u) = CartesianGrids.plan_intfact(t,u,sys)\nplan_constraints(u,t) = ConstrainedSystems.plan_constraints(u,t,sys)\nr₁(u,t) = ConstrainedSystems.r₁(u,t,sys) + wforce(t)\nr₂(u,t) = ConstrainedSystems.r₂(u,t,sys)\n@time ifherk = IFHERK(w₀,f,sys.Δt,plan_intfact,plan_constraints,(r₁,r₂),\n        rk=ConstrainedSystems.RK31)","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now set the initial conditions, and initialize some vectors for storing results","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"t = 0.0\nu = deepcopy(w₀);\nfx = Float64[];\nfy = Float64[];\nthist = Float64[];","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Let's first integrate just one time unit forward to see the results. We will collect the force data into the fx and fy arrays.","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"tf = 1.0;\nT = Δt:Δt:tf;\n@time for ti in T\n    global t, u, f = ifherk(t,u)\n\n    push!(thist,t)\n    push!(fx,sum(f.u)*Δx^2)\n    push!(fy,sum(f.v)*Δx^2)\nend","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Plot the solution:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"xg, yg = coordinates(w₀,dx=Δx,I0=origin(sys))\nplot(xg,yg,u,levels=range(-0.25,stop=0.25,length=30), color = :RdBu,width=1,\n        xlim=(-1+Δx,3-Δx),ylim=(-1+Δx,1-Δx))\nplot!(body)\nsavefig(\"cyl1.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The solution is still symmetric because we have not yet applied the perturbation. Advance 4 more units:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"tf = 4.0;\nT = Δt:Δt:tf;\n@time for ti in T\n    global t, u, f = ifherk(t,u)\n\n    push!(thist,t)\n    push!(fx,sum(f.u)*Δx^2)\n    push!(fy,sum(f.v)*Δx^2)\nend\nplot(xg,yg,u,levels=range(-0.25,stop=0.25,length=30), color = :RdBu, width=1,\n        xlim=(-1+Δx,3-Δx),ylim=(-1+Δx,1-Δx))\nplot!(body)\nsavefig(\"cyl5.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now it is losing symmetry after the perturbation has triggered this behavior. Run it several more time units:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"tf = 25.0;\nT = Δt:Δt:tf;\n@time for ti in T\n    global t, u, f = ifherk(t,u)\n\n    push!(thist,t)\n    push!(fx,sum(f.u)*Δx^2)\n    push!(fy,sum(f.v)*Δx^2)\nend\nplot(xg,yg,u,levels=range(-0.25,stop=0.25,length=30), color = :RdBu,width=1,\n        xlim=(-1+Δx,3-Δx),ylim=(-1+Δx,1-Δx))\nplot!(body)\nsavefig(\"cyl30.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"A full wake now after 30 time units! Plot the force, too:","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plt = plot(layout = (2,1), size = (600, 400))\nplot!(plt[1],thist,2*fy,xlim=(0,30),ylim=(-2,2),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",legend=false)\nplot!(plt[2],thist,2*fx,xlim=(0,30),ylim=(0,4),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",legend=false)\nplt\nsavefig(\"cylforce.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/#Methods","page":"Navier-Stokes systems","title":"Methods","text":"","category":"section"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Modules = [ViscousFlow]","category":"page"},{"location":"manual/navierstokes/#ViscousFlow.ViscousFlow","page":"Navier-Stokes systems","title":"ViscousFlow.ViscousFlow","text":"The ViscousFlow module is here\n\n\n\n\n\n","category":"module"},{"location":"manual/navierstokes/#ViscousFlow.NavierStokes","page":"Navier-Stokes systems","title":"ViscousFlow.NavierStokes","text":"mutable struct NavierStokes{NX, NY, N, isstatic}\n\nA system type that utilizes a grid of NX x NY dual cells and N Lagrange forcing points to solve the discrete Navier-Stokes equations in vorticity form. The parameter isstatic specifies whether the forcing points remain static in the grid.\n\nFields\n\nRe: Reynolds number\nU∞: Tuple of components of free-stream velocity\nΔx: Size of each side of a grid cell\nI0: Tuple of indices of the primal node corresponding to physical origin\nΔt: Time step\nrk: Runge-Kutta coefficients\nL: Pre-planned discrete Laplacian operator and inverse\nX̃: Lagrange point coordinate data (if present), expressed in inertial coordinates       (if static) or in body-fixed coordinates (if moving)\nHmat: Pre-computed regularization matrix (if present)\nEmat: Pre-computed interpolation matrix (if present)\nVb: Buffer space for vector data on Lagrange points\nFq: Buffer space for primal cell edge data\nWw: Buffer space for dual cell edge data\nQq: More buffer space for dual cell edge data\n_isstore: flag to specify whether to store regularization/interpolation matrices\n\nConstructors:\n\nNavierStokes(Re,Δx,xlimits,ylimits,Δt               [,U∞ = (0.0, 0.0)][,X̃ = VectorData{0}()]               [,isstore=false][,isstatic=true][,isfilter=false]               [,rk=ConstrainedSystems.RK31]               [,ddftype=CartesianGrids.Yang3]) specifies the Reynolds number Re, the grid               spacing Δx, the dimensions of the domain in the tuples xlimits               and ylimits (excluding the ghost cells), and the time step size Δt.               The other arguments are optional. Note that isstore set to true               would store matrix versions of the operators. This makes the method               faster, at the cost of storage. If isfilter is set to true, then               the regularization relies on a filtered version.\n\n\n\n\n\n","category":"type"},{"location":"manual/navierstokes/#Base.size-Union{Tuple{NY}, Tuple{NX}, Tuple{NavierStokes{NX,NY,N,isstatic} where isstatic where N,Int64}} where NY where NX","page":"Navier-Stokes systems","title":"Base.size","text":"size(sys::NavierStokes,d::Int) -> Int\n\nReturn the number of indices of the grid used by sys along dimension d.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#Base.size-Union{Tuple{NavierStokes{NX,NY,N,isstatic} where isstatic where N}, Tuple{NY}, Tuple{NX}} where NY where NX","page":"Navier-Stokes systems","title":"Base.size","text":"size(sys::NavierStokes) -> Tuple{Int,Int}\n\nReturn a tuple of the number of indices of the grid used by sys\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#CartesianGrids.cellsize-Tuple{NavierStokes}","page":"Navier-Stokes systems","title":"CartesianGrids.cellsize","text":"cellsize(sys::NavierStokes) -> Float64\n\nReturn the grid cell size of system sys\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#CartesianGrids.origin-Tuple{NavierStokes}","page":"Navier-Stokes systems","title":"CartesianGrids.origin","text":"origin(sys::NavierStokes) -> Tuple{Int,Int}\n\nReturn a tuple of the indices of the primal node that corresponds to the physical origin of the coordinate system used by sys. Note that these indices need not lie inside the range of indices occupied by the grid. For example, if the range of physical coordinates occupied by the grid is (1.0,3.0) x (2.0,4.0), then the origin is not inside the grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#RigidBodyTools.assign_velocity!-Union{Tuple{N}, Tuple{VectorData{N,T,DT} where DT<:(AbstractArray{T,1} where T) where T,VectorData{N,T,DT} where DT<:(AbstractArray{T,1} where T) where T,BodyList,Array{RigidTransform,1},Array{RigidBodyMotion,1},Real}} where N","page":"Navier-Stokes systems","title":"RigidBodyTools.assign_velocity!","text":"assign_velocity!(V::VectorData,X::VectorData,\n                 xc::Real,yc::Real,α::Real,\n                 mlist::Vector{RigidBodyMotion},t::Real)\n\nAssign the components of rigid body velocity for every body (in inertial coordinate system) at time t in the overall data structure V, using coordinates described by X (also in inertial coordinate system), based on array of supplied motion mlist for each body.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#ViscousFlow.setstepsizes-Tuple{Real}","page":"Navier-Stokes systems","title":"ViscousFlow.setstepsizes","text":"setstepsizes(Re[,gridRe=2][,cfl=0.5][,fourier=0.5]) -> Float64, Float64\n\nSet the grid cell spacing and time step size based on the Reynolds number Re, the grid Reynolds number gridRe, cfl number cfl, and grid Fourier number fourier. The last three parameters all have default values.\n\nExample\n\nHere is an example of setting parameters based on Reynolds number 100 (with   default choices for grid Reynolds number, CFL number, and Fourier number):\n\njulia> Δx, Δt = setstepsizes(100)\n(0.02, 0.01)\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#ViscousFlow.timerange-Tuple{Any,Any}","page":"Navier-Stokes systems","title":"ViscousFlow.timerange","text":"timerange(tf,sys::NavierStokes)\n\nCreate a range of times, starting at the t = Δt (the time step of sys), and ending at t = tf.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#ViscousFlow.timestep-Tuple{NavierStokes}","page":"Navier-Stokes systems","title":"ViscousFlow.timestep","text":"timestep(sys::NavierStokes) -> Float64\n\nReturn the time step size of system sys\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#Index","page":"Navier-Stokes systems","title":"Index","text":"","category":"section"},{"location":"manual/navierstokes/","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Pages = [\"navierstokes.md\"]","category":"page"},{"location":"#ViscousFlow.jl","page":"Home","title":"ViscousFlow.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"a framework for simulating viscous incompressible flows","category":"page"},{"location":"","page":"Home","title":"Home","text":"The objective of this package is to allow easy setup and fast simulation of incompressible flows, particularly those past bodies in motion. The package provides tools for","category":"page"},{"location":"","page":"Home","title":"Home","text":"constructing grids and body shapes,\nspecifying the relevant parameters and setting their values,\nsolving the problem, and finally,\nvisualizing and analyzing the results.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The underlying grids are uniform and Cartesian, making use of the CartesianGrids package. This package allows the use of the lattice Green's function (LGF) for inverting the Poisson equation; the diffusion operators are solved with the integrating factor (Liska and Colonius [1]). Many of the core aspects of the fluid-body interaction are based on the immersed boundary projection method, developed by Taira and Colonius [2]. The coupled fluid-body interactions are based on the work of Wang and Eldredge [3]. These are implemented with the ConstrainedSystems package. Tools for creating bodies and their motions are based on the RigidBodyTools package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package works on Julia 1.0 and above and is registered in the general Julia registry. To install from the REPL, type e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add ViscousFlow","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, in any version, type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using ViscousFlow","category":"page"},{"location":"","page":"Home","title":"Home","text":"The plots in this documentation are generated using Plots.jl. You might want to install that, too, to follow the examples.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]: Liska, S. and Colonius, T. (2017) \"A fast immersed boundary method for external incompressible viscous flows using lattice Green's functions,\" J. Comput. Phys., 331, 257–279.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2]: Taira, K. and Colonius, T. (2007) \"The immersed boundary method: a projection approach,\" J. Comput. Phys., 225, 2118–2137.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[3]: Wang, C. and Eldredge, J. D. (2015) \"Strongly coupled dynamics of fluids and rigid-body systems with the immersed boundary projection method,\" J. Comput. Phys., 295, 87–113. (DOI).","category":"page"}]
}
