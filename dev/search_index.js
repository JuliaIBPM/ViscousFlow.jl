var documenterSearchIndex = {"docs":
[{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"EditURL = \"../../../test/literate/7.-Variable-free-stream.jl\"","category":"page"},{"location":"manual/7.-Variable-free-stream/#Variable-free-stream","page":"Variable free stream","title":"Variable free stream","text":"","category":"section"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"In this notebook we will simulate the flow with a time-varying free stream past a stationary body. To demonstrate this, we will solve for oscillatory flow past a rectangular object, in which the x component of the free stream is","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"U_infty(t) = A sin(Omega t)","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"CurrentModule = ViscousFlow","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"using ViscousFlow","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"using Plots\nusing Statistics","category":"page"},{"location":"manual/7.-Variable-free-stream/#Problem-specification","page":"Variable free stream","title":"Problem specification","text":"","category":"section"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"We will set the Reynolds number to 200","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"my_params = Dict()\nmy_params[\"Re\"] = 200","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"In order to set a time-varying free stream, we have to define a function that provides the instantaneous free stream components and pass that function into the system definition. In this function, we will use the OscillatoryDOF function (available via the RigidBodyTools.jl package) to create the modulated free stream. To demonstrate its possibilities, we will pass in the parameters for the sinusoid via the my_params dictionary. The \"freestream average\" specifies a mean free stream, if desired.","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"my_params[\"freestream average\"] = 0.0\nmy_params[\"freestream frequency\"]  = 2.0\nmy_params[\"freestream amplitude\"] = 0.5\nmy_params[\"freestream phase\"] = π/2","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"Now we define the function. We can call it anything we want, but it has to have the argument signature as shown. The Sinusoid function is used, with the shift operator >> to apply any phase lag.","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"function my_freestream(t,phys_params)\n    U = phys_params[\"freestream average\"]\n    Ω = phys_params[\"freestream frequency\"]\n    Ax = phys_params[\"freestream amplitude\"]\n    ϕx = phys_params[\"freestream phase\"]\n    kin = OscillatoryDOF(Ax,Ω,ϕx,U)\n\n    Vinf_angle = get(phys_params,\"freestream angle\",0.0)\n    Vinf_amp = dof_velocity(kin(t))\n\n    Uinf = Vinf_amp*cos(Vinf_angle)\n    Vinf = Vinf_amp*sin(Vinf_angle)\n    return Uinf, Vinf\nend","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"The freestream function is passed in via the \"freestream\" key in the parameters Dict.","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"my_params[\"freestream\"] = my_freestream","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"Now let us carry on with the other usual steps:","category":"page"},{"location":"manual/7.-Variable-free-stream/#Discretize","page":"Variable free stream","title":"Discretize","text":"","category":"section"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"xlim = (-2.0,2.0)\nylim = (-1.5,1.5)\nmy_params[\"grid Re\"] = 4.0\ng = setup_grid(xlim,ylim,my_params)","category":"page"},{"location":"manual/7.-Variable-free-stream/#Set-up-bodies","page":"Variable free stream","title":"Set up bodies","text":"","category":"section"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"Here, we will set up an ellipse in the center of the domain","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"Δs = surface_point_spacing(g,my_params)\nbody = Ellipse(0.25,0.5,Δs)\n\njoint = Joint(RigidTransform([0.0,0.0],0.0))\nm = RigidBodyMotion(joint,body)\nx = init_motion_state(body,m)\nupdate_body!(body,x,m)","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"plot(body,xlim=xlim,ylim=ylim)","category":"page"},{"location":"manual/7.-Variable-free-stream/#Construct-the-system-structure","page":"Variable free stream","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"This step is like the previous notebooks:","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"sys = viscousflow_system(g,body,phys_params=my_params,motions=m);\nnothing #hide","category":"page"},{"location":"manual/7.-Variable-free-stream/#Initialize","page":"Variable free stream","title":"Initialize","text":"","category":"section"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"Now, we initialize with zero vorticity","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"u0 = init_sol(sys)","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"and create the integrator","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"tspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/7.-Variable-free-stream/#Solve","page":"Variable free stream","title":"Solve","text":"","category":"section"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"Now we are ready to solve the problem. Let's advance the solution to t = 25.","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"@time step!(integrator,2.5)","category":"page"},{"location":"manual/7.-Variable-free-stream/#Examine","page":"Variable free stream","title":"Examine","text":"","category":"section"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"Let's look at the flow field at the end of this interval","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"sol = integrator.sol\nplt = plot(layout = (2,2), size = (800, 600), legend=:false)\ntsnap = 1.0:0.5:2.5\nfor (i, t) in enumerate(tsnap)\n    plot!(plt[i],vorticity(sol,sys,t),sys,layers=false,title=\"t = $(round(t,digits=2))\",clim=(-10,10),levels=range(-10,10,length=30),color = :RdBu)\n    plot!(plt[i],surfaces(sol,sys,t))\nend\nplt","category":"page"},{"location":"manual/7.-Variable-free-stream/#Compute-the-force-history","page":"Variable free stream","title":"Compute the force history","text":"","category":"section"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"Just as we did for the stationary body in a constant free stream","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"mom, fx, fy = force(sol,sys,1);\nnothing #hide","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"Plot them","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"plot(\nplot(sol.t,2*fx,xlim=(0,Inf),ylim=(-6,6),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",legend=:false),\nplot(sol.t,2*fy,xlim=(0,Inf),ylim=(-6,6),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",legend=:false),\n    size=(800,350)\n)","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"The mean drag and lift coefficients are","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"meanCD = mean(2*fx[3:end])","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"meanCL = mean(2*fy[3:end])","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"","category":"page"},{"location":"manual/7.-Variable-free-stream/","page":"Variable free stream","title":"Variable free stream","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"EditURL = \"../../../test/literate/3.-Applying-pulse-forcing-to-a-flow.jl\"","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/#Applying-pulse-forcing-to-a-flow","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"","category":"section"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"Here, we will show how to apply a transient force to a flow.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"CurrentModule = ViscousFlow","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"using ViscousFlow","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"using Plots","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"For this case, we first seek to introduce a pulse to an otherwise quiescent fluid, with no boundaries. The pulse shape will be a smooth Gaussian-distributed force, directed upward.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"We will start with the usual steps: specify the problem parameters and the discretization.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"my_params = Dict()\n\nmy_params[\"Re\"] = 200\nxlim = (-2.0,2.0)\nylim = (-2.0,4.0)\nmy_params[\"grid Re\"] = 4.0\ng = setup_grid(xlim,ylim,my_params)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/#Construct-the-forcing","page":"Applying pulse forcing to a flow","title":"Construct the forcing","text":"","category":"section"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"There are a variety of forcing types available to us. Here, we will use area-type forcing, which is distributed over a region of space. We will create a short-lived force applied in the vertical direction in this region. For the spatial distribution of this forcing, we make use of a Gaussian field. We will center it at (0,0), and give it a strength of 10, using the SpatialGaussian constructor. The x component of the force we set to zero, using the EmptySpatialField constructor.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"σx = 0.5\nσy = 0.1\nx0 = y0 = 0.0\namp = 10\nforce_dist = [EmptySpatialField(),SpatialGaussian(σx,σy,x0,y0,amp)];\nnothing #hide","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"When we introduce forcing in any problem, it is essential to supply a model function that supplies the instantaneous strength of the forcing. This gives us the opportunity to specify the transient aspect of the forcing. In this example, we modulate the force in time with a Gaussian, with a small half-width in time equal to sigma_t = 01, effectively creating a pulse. We center it at time t_0 = 01 (using the >> shift operator). This is carried out in the function below, in which we create the modulating function modfcn. Note that fr.generated_field() provides the spatial distribution that we specified with our spatial field force_dist. This is multiplied by modfcn, our Gaussian pulse, evaluated at the current time.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"function forcing_model!(σ,T,t,fr::AreaRegionCache,phys_params)\n    σt = 0.1\n    t0 = 0.1\n    modfcn = Gaussian(σt,sqrt(π*σt^2)) >> t0\n    σ .= modfcn(t)*fr.generated_field()\nend","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"We pack the model function and the spatial field together into an AreaForcingModel, which we then put into a forcing dictionary. It is important to use the key \"forcing models\" for this.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"afm = AreaForcingModel(forcing_model!,spatialfield=force_dist)\nforcing_dict = Dict(\"forcing models\" => afm);\nnothing #hide","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/#Construct-the-system-structure","page":"Applying pulse forcing to a flow","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"We supply these forcing characteristics with the keyword argument forcing as we set up the usual system structure:","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"sys = viscousflow_system(g,phys_params=my_params,forcing=forcing_dict);\nnothing #hide","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"The remaining steps go just as they did for the previous examples. We will simulate the pulse for 4 time units:","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"u0 = init_sol(sys)\ntspan = (0.0,10.0) # longer than we need, but just being safe\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"step!(integrator,4.0)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/#Examine","page":"Applying pulse forcing to a flow","title":"Examine","text":"","category":"section"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"Let's look at a sequence of snapshots of the forced flow. As we see, this short-lived force creates a dipole-like pair of counter-rotating vortices that propagates upward under its own influence.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"sol = integrator.sol\nplt = plot(layout = (1,4), size = (800, 300), legend=:false)\ntsnap = 0.1:1.0:3.1\nfor (i, t) in enumerate(tsnap)\n    plot!(plt[i],vorticity(sol,sys,t),sys,title=\"t = $(round(t,digits=2))\")\nend\nplt","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"And here is another look a the flow, this time with streamlines:","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"plot(streamfunction(integrator),sys,title=\"Streamfunction at t = $(round(integrator.t,digits=2))\")","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"We can also supply more than one pulse. If we don't change the spatial distribution, then we just redefine the model function and run it again: Let's give 3 pulses, each separated by 1 time unit.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"function forcing_model!(σ,T,t,fr::AreaRegionCache,phys_params)\n    σt = 0.1\n    t0 = [0.1, 1.1, 2.1]\n    modfcn = (Gaussian(σt,sqrt(π*σt^2)) >> t0[1]) +\n             (Gaussian(σt,sqrt(π*σt^2)) >> t0[2]) +\n             (Gaussian(σt,sqrt(π*σt^2)) >> t0[3])\n    σ .= modfcn(t)*fr.generated_field()\nend","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"u0 = init_sol(sys)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"step!(integrator,4.0)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/#Examine-2","page":"Applying pulse forcing to a flow","title":"Examine","text":"","category":"section"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"In this case, the pulses coalesce with one another","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"sol = integrator.sol\nplt = plot(layout = (1,4), size = (800, 300), legend=:false)\ntsnap = 0.1:1.0:3.1\nfor (i, t) in enumerate(tsnap)\n    plot!(plt[i],vorticity(sol,sys,t),sys,title=\"t = $(round(t,digits=2))\")\nend\nplt","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"Applying pulse forcing to a flow","title":"Applying pulse forcing to a flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"EditURL = \"../../../test/literate/8.-Lid-driven-cavity.jl\"","category":"page"},{"location":"manual/8.-Lid-driven-cavity/#Lid-driven-cavity-flow","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"","category":"section"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"In this notebook we will simulate the flow in a square cavity with a top moving wall.","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"CurrentModule = ViscousFlow","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"using ViscousFlow","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"using Plots","category":"page"},{"location":"manual/8.-Lid-driven-cavity/#Problem-specification","page":"Lid-driven cavity flow","title":"Problem specification","text":"","category":"section"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"Take Re=100 for example:","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"my_params = Dict()\nmy_params[\"Re\"] = 100","category":"page"},{"location":"manual/8.-Lid-driven-cavity/#Discretization","page":"Lid-driven cavity flow","title":"Discretization","text":"","category":"section"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"Note that the rectangle function used for making the cavity shape requires a specified half length. The immersed boundary projection method for internal flow requires the size of the domain to be at least a step size greater at the boundaries (i.e. halflength + Δx). So, for safety we make it 2 percent greater on each side.","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"Also, we set the grid Reynolds number to 0.5, lower than default of 2, so we have more accuracy. We also set the CFL number to 1.0, larger than the default of 0.5, so we can get to steady state faster.","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"halflength=0.5\ndomain_lim=1.02*halflength\nxlim, ylim = (-domain_lim,domain_lim),(-domain_lim,domain_lim)\nmy_params[\"grid Re\"] = 0.5\nmy_params[\"CFL\"] = 1.0\ng = setup_grid(xlim,ylim,my_params)\n\nΔs = surface_point_spacing(g,my_params)","category":"page"},{"location":"manual/8.-Lid-driven-cavity/#Cavity-Geometry","page":"Lid-driven cavity flow","title":"Cavity Geometry","text":"","category":"section"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"A square cavity can be created using the Rectangle() function with the half length defined above. We place its center at the origin.","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"body = Rectangle(halflength,halflength,Δs)\nX = MotionTransform([0.0,0.0],0.0)\njoint = Joint(X)\nm = RigidBodyMotion(joint,body)\nx = init_motion_state(body,m)\nupdate_body!(body,x,m)","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"plot(body,fillrange=nothing)","category":"page"},{"location":"manual/8.-Lid-driven-cavity/#Boundary-Condition-at-the-moving-wall","page":"Lid-driven cavity flow","title":"Boundary Condition at the moving wall","text":"","category":"section"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"Assign velocity to the top boundary (in the interior of the square). To do this, we redefine the interior boundary condition function (the \"interior\" key of the bc dictionary). We don't have to touch the exterior boundary condition, because it defaults to zero, as we desire.","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"Rectangles and other polygon shapes in the RigidBodyTools.jl package have a side field that allows easy access to the index range for each side. Here, we use that feature to set the x velocity along the top to 1. We also use the view function to provide access to the part of the overall velocity vector associated with body 1. That's not particularly important in this example, since there is only one body, but it is useful in problems that have multiple bodies.","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"function my_vsminus(t,x,base_cache,phys_params,motions)\n  vsminus = zeros_surface(base_cache)\n  vsu = view(vsminus.u,base_cache,1)\n\n  top = base_cache.bl[1].side[3]\n  vsu[top] .= 1.0\n  return vsminus\nend\n\nbcdict = Dict(\"interior\" => my_vsminus)","category":"page"},{"location":"manual/8.-Lid-driven-cavity/#Construct-the-system-structure","page":"Lid-driven cavity flow","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"Now we provide our parameters and the boundary condition dictionary.","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"sys = viscousflow_system(g,body,phys_params=my_params,bc=bcdict,motions=m);\nnothing #hide","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"Initialize","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"u0 = init_sol(sys)","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"Set up integrator","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"tspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/8.-Lid-driven-cavity/#Solve","page":"Lid-driven cavity flow","title":"Solve","text":"","category":"section"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"For demonstration purposes, we run this over 2 convective time units. (You can run it longer to get it to steady state.)","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"step!(integrator,2)","category":"page"},{"location":"manual/8.-Lid-driven-cavity/#Examine","page":"Lid-driven cavity flow","title":"Examine","text":"","category":"section"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"Plot the vorticity and streamlines. We take a little care with the streamlines to show the small recirculation zones in the lower corners.","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"mins, maxs = extrema(streamfunction(integrator))\nslevs = vcat(range(mins,maxs,length=11),maxs-0.00438,maxs-0.00353,maxs-0.00348)\nplot(\nplot(vorticity(integrator),sys,title=\"Vorticity\",clim=(-10,10),color=:turbo,linewidth=1.5,ylim=ylim,levels=-6:0.5:5),\nplot(streamfunction(integrator),sys,title=\"Streamfunction\",color=:black,ylim=ylim,levels=slevs)\n)","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"","category":"page"},{"location":"manual/8.-Lid-driven-cavity/","page":"Lid-driven cavity flow","title":"Lid-driven cavity flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"EditURL = \"../../../test/literate/1.-Basic-viscous-flow.jl\"","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Basic-viscous-flow","page":"Basic viscous flow","title":"Basic viscous flow","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"In this example, we will simulate various examples of a basic unbounded viscous flow–-a flow without boundaries. Our initial condition will be a distribution of vorticity.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"CurrentModule = ViscousFlow","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"using ViscousFlow","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"using Plots","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#The-basic-steps","page":"Basic viscous flow","title":"The basic steps","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"To carry out any simulation in ViscousFlow, we need to carry out a few basic steps:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Specify the problem: Set the Reynolds number, the free stream, and any other problem parameters\nDiscretize: Set up a solution domain, choose the grid Reynolds number and the critical time step limits\nConstruct the system structure: Create the operators that will be used to perform the simulation\nInitialize: Set the initial flow field and initialize the integrator\nSolve: Solve the flow field\nExamine: Examine the results","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"We will go through all of these here. For the examples we will carry out in this notebook, the first two steps need only be carried out once.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"The package utilizes parameters arranged into a dictionary, or Dict. The dictionary associates names (or keys) with values. Most of these key have standardizes names. We will describe the entries in this as we go, adding them in one at a time for expositional purposes. We initializing it first and call it my_params for this example.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"my_params = Dict()","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Problem-specification","page":"Basic viscous flow","title":"Problem specification","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"We will set the Reynolds number to be 200 and no free stream. The Reynolds number key is \"Re\". If we had a free stream, then we would set this with two keys: \"freestream speed\" and \"freestream angle\". They default to zero if we don't put anything into the dictionary. But we always have to put in the Reynolds number.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"my_params[\"Re\"] = 200","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Discretize","page":"Basic viscous flow","title":"Discretize","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"We will set up a domain from x = -2 to x = 2, and y = -2 to y = 2. The Reynolds number helps us determine the grid spacing and time step size. To set these, we set a target grid Reynolds number, with the key \"grid Re\". We will set this to 4 here; if we don't set it, it defaults to 2. Note that the choice we make here is a compromise:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"smaller grid Reynolds number means smaller grid spacing, but slower simulations\nlarger grid Reynolds number means less accurate results","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"xlim = (-2.0,2.0)\nylim = (-2.0,2.0)\nmy_params[\"grid Re\"] = 4.0","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Then we set up the grid","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"g = setup_grid(xlim,ylim,my_params)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Construct-the-system-structure","page":"Basic viscous flow","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"This part is easy - you supply the parameters you have just set up. It returns a structure with all of the necessary mathematical operators:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"sys = viscousflow_system(g,phys_params=my_params);\nnothing #hide","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"This is now ready to solve any unbounded viscous flow problems. Now, we will solve a few different problems to see how it works.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#A-basic-example:-the-Lamb-Oseen-vortex","page":"Basic viscous flow","title":"A basic example: the Lamb-Oseen vortex","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"This example starts with a single vortex with a Gaussian distribution of vorticity. To generate this, will use the SpatialGaussian function: The command below creates a Gaussian with radius σ at (0,0) with strength 1.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"σ = 0.2\nx0 = 0.0\ny0 = 0.0\nA = 1\ngauss = SpatialGaussian(σ,σ,x0,y0,A)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Initialize","page":"Basic viscous flow","title":"Initialize","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Now, we create an instance of this vorticity distribution on the grid by calling init_sol with this vortex.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"u0 = init_sol(gauss,sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"We use this initial condition to initialize the integrator. The integrator is the structure that holds all of our solution and operator information. With it, we can start the simulation, restart the simulation later, etc. We specify a range of time over which to advance the solution.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Note: This range need only be large enough to contain the whole interval of time we wish to simulate. It does not need to be chosen very precisely.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Note 2: There is no need to restart the problem! We can keep applying the step! function below as long we need.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"tspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Solve","page":"Basic viscous flow","title":"Solve","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Now we are ready to solve the problem. Let's advance the solution to t = 1:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"step!(integrator,1.0)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"We can see now that the solution has been advanced in time:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"integrator","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Examine","page":"Basic viscous flow","title":"Examine","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Let's examine the results. It is important to show a few different ways that we can do this. The most straightforward way is to just look at the flow fields at the current state of the integrator. For example, to get the current velocity field, type velocity(integrator). We can do the same for vorticity, streamfunction (the streamlines), scalarpotential, convective_derivative, and pressure.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"We will look at some of these at the current state:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"plot(\nplot(vorticity(integrator),sys,title=\"Vorticity\"),\nplot(streamfunction(integrator),sys,title=\"Streamlines\"),\nplot(pressure(integrator),sys,title=\"Pressure\"),\nplot(velocity(integrator),sys))","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"For this problem, we can compare with the exact solution. The exact solution is also a Gaussian, but with a radius sqrtsigma^2+2tRe","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"oseen_exact(t) = SpatialGaussian(sqrt(σ^2+2*t/my_params[\"Re\"]),sqrt(σ^2+2*t/my_params[\"Re\"]),x0,y0,A)\nexactsol(t) = init_sol(oseen_exact(t),sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"plot(vorticity(integrator)[:,104],label=\"Numerical\")\nplot!(vorticity(exactsol(integrator.t),sys,integrator.t)[:,104],label=\"Exact\")\nplot!(title=string(\"Vorticity at t = \",round(integrator.t,digits=2)))","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Second-example:-co-rotating-vortices","page":"Basic viscous flow","title":"Second example: co-rotating vortices","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"The previous example is not very exciting, because the convection of the flow is simply circular. The next example is more interesting, because we will start with two vortices that influence each other's motion:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"σ = 0.1\nx01, y01 = 0.5, 0.0\nx02, y02 = -0.5, 0.0\nA = 1\ntwogauss = SpatialGaussian(σ,σ,x01,y01,A) + SpatialGaussian(σ,σ,x02,y02,A)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Initialize-2","page":"Basic viscous flow","title":"Initialize","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Now, we create an instance of this vorticity distribution on the grid.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"u0 = init_sol(twogauss,sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"plot(vorticity(u0,sys,0.0),sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"tspan = (0.0,8.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Solve-2","page":"Basic viscous flow","title":"Solve","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Now we are ready to solve the problem. Let's advance the solution to t = 8:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"step!(integrator,8.0)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Examine-2","page":"Basic viscous flow","title":"Examine","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"In this case, it is best to view the results as an animation. In the previous example, we just looked at the final state of the integrator. Here, to animate, we will make use of the solution history that is held by the integrator, integrator.sol. Let's create an alias for this to shorten our commands:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"sol = integrator.sol;\nnothing #hide","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"The vortices orbit each other and then eventually merge together. If we wish to make a nice figure, we can arrange snapshots on a grid:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"plt = plot(layout = (2,4), size = (800, 400), legend=:false)\ntsnap = 0.0:1.0:7.0\nfor (i, t) in enumerate(tsnap)\n    plot!(plt[i],vorticity(sol,sys,t),sys,levels=range(0.1,5,length=31))\nend\nsavefig(plt,\"CoRotating.pdf\")\nplt","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"If you wish to animate the solution, e.g., plotting the vorticity every 5 steps you can use","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"@gif for t in sol.t\n   plot(vorticity(sol,sys,t),sys)\nend every 5","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Try other examples!","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"Make one or both of the vortices into elliptical shapes\nMake one stronger than the other\nAdd other vortices into the initial distribution","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"Basic viscous flow","title":"Basic viscous flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"EditURL = \"../../../test/literate/9.-Exogenous-degrees-of-freedom.jl\"","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/#Exogenous-degrees-of-freedom","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"","category":"section"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"CurrentModule = ViscousFlow","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Thus far, the motion of bodies or of incident flows has been prescribed with time-varying functions known a priori. In other words, we knew in advance how the body or free stream would behave for all time. However, it is often the case that we do not know the motion in advance, because, e.g., that motion depends on the evolving state of the fluid flow. That is the case for fluid-body interactions, in which the body motion depends on the forces imparted by the fluid on the body. It is also the case for active feedback control or reinforcement learning, in which a controller/agent might change some degree of freedom based on what is observed.","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"We will refer to such a degree of freedom as exogenous. In this example, we will demonstrate how the package can incorporate exogenous degrees of freedom into the flow evolution. These exogenous states are specified by providing the value of their acceleration.","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"The example will be a flat plate in a steady free stream at nominally zero angle of incidence. However, the y acceleration will vary randomly. Since there is only a single body and it remains rigid, we will solve the problem in a reference frame moving with the body. However, exogenous degrees of freedom can be used in problems of arbitrary motion.","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"In this simple example, this exogenous y acceleration will not depend on anything, but it will be obvious from the example how it could.","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"using ViscousFlow","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"using Plots","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Set the Reynolds number","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"my_params=Dict()\nmy_params[\"Re\"] = 200","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Set up the grid","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"xlim = (-2.0,4.0)\nylim = (-3.0,3.0)\nmy_params[\"grid Re\"] = 3.0\ng = setup_grid(xlim,ylim,my_params)","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Set up the body","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Δs = surface_point_spacing(g,my_params)\nbody = Plate(1.0,Δs)","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/#Kinematics","page":"Exogenous degrees of freedom","title":"Kinematics","text":"","category":"section"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"There won't be any rotation, so we will put the joint at the body's center.","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"parent_body, child_body = 0, 1\nXp = MotionTransform([0,0],0) # transform from inertial system to joint\nxpiv = [0.0,0.0]\nXc = MotionTransform(xpiv,0.0)","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Now set the kinematics. Rather than provide a free stream, we will set the x velocity of the body to be -1. We will set the angular velocity to zero.","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"adof = ConstantVelocityDOF(0)\nxdof = ConstantVelocityDOF(-1)","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Now, to designate the y degree of freedom as exogenous, we simply use","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"ydof = ExogenousDOF()","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Now assemble the joint and the motion","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"dofs = [adof,xdof,ydof]\njoint = Joint(FreeJoint2d,parent_body,Xp,child_body,Xc,dofs)\nm = RigidBodyMotion(joint,body)","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Set the boundary condition functions","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"function my_vsplus(t,x,base_cache,phys_params,motions)\n  vsplus = zeros_surface(base_cache)\n  surface_velocity_in_translating_frame!(vsplus,x,base_cache,motions,t)\n  return vsplus\nend\n\nfunction my_vsminus(t,x,base_cache,phys_params,motions)\n  vsminus = zeros_surface(base_cache)\n  surface_velocity_in_translating_frame!(vsminus,x,base_cache,motions,t)\n  return vsminus\nend\n\nbcdict = Dict(\"exterior\" => my_vsplus, \"interior\" => my_vsminus)","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/#Construct-system-and-initialize","page":"Exogenous degrees of freedom","title":"Construct system and initialize","text":"","category":"section"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"sys = viscousflow_system(g,body,phys_params=my_params,bc=bcdict,motions=m,reference_body=1);\n\nu0 = init_sol(sys)\ntspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)\ndt = timestep(u0,sys)","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/#Solve","page":"Exogenous degrees of freedom","title":"Solve","text":"","category":"section"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"To solve the problem, we advance the solution inside a loop. The timestep with which we advance is up to us, though it should be an integer multiple of the timestep used by the underlying solver (dt above). This prevents the need for expensive interpolations. We will simply set it to dt here.","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Inside the loop, we update the value of the exogenous acceleration, using the update_exogenous! function. This is done with a vector of all such exogenous states, though there is only one state in this example. We draw its value from a normal distribution.","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"dt_advance = dt\ntfinal = 2.5\nfor t in 0:dt_advance:tfinal\n    a_y = randn()\n    update_exogenous!(integrator,[a_y])\n    step!(integrator,dt_advance)\nend","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/#Plot-it","page":"Exogenous degrees of freedom","title":"Plot it","text":"","category":"section"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"Plot the vorticity field","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"sol = integrator.sol\nplt = plot(layout = (4,3), size = (900, 900), legend=:false)\ntsnap = tfinal/12:tfinal/12:tfinal\nfor (i, t) in enumerate(tsnap)\n    plot!(plt[i],vorticity(sol,sys,t),sys,clim=(-20,20),levels=range(-20,20,length=16),ylim=(-1.5,1.5),title=\"$(round(t,digits=4))\")\nend\nplt","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"and compute and plot the force and moment","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"mom, fx, fy = force(sol,sys,1)\n\nplot(\nplot(sol.t,2*fx,xlim=(0,Inf),ylim=(-5,5),xlabel=\"\\$t\\$\",ylabel=\"\\$C_x\\$\",legend=:false),\nplot(sol.t,2*fy,xlim=(0,Inf),ylim=(-5,5),xlabel=\"\\$t\\$\",ylabel=\"\\$C_y\\$\",legend=:false),\nplot(sol.t,2*mom,xlim=(0,Inf),ylim=(-2,2),xlabel=\"\\$t\\$\",ylabel=\"\\$C_m\\$\",legend=:false),\n    size=(800,350)\n)","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"We can also look at the y position and velocity. These are contained in the joint state vector, aux_state(u). We can use the functions exogenous_position_vector and exogenous_velocity_vector to access them. (The index [1] below is required because these functions return a vector of exogenous states for a particular joint. There is only one component that is exogenous in this example.","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"jointid = 1\ny = map(u -> exogenous_position_vector(aux_state(u),m,jointid)[1],sol)\nv = map(u -> exogenous_velocity_vector(aux_state(u),m,jointid)[1],sol)\nplot(sol.t,y,label=\"\\$y\\$\",xlabel=\"\\$t\\$\")\nplot!(sol.t,v,label=\"\\$v\\$\")","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"","category":"page"},{"location":"manual/9.-Exogenous-degrees-of-freedom/","page":"Exogenous degrees of freedom","title":"Exogenous degrees of freedom","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"EditURL = \"../../../test/literate/4.-Multiple-stationary-bodies.jl\"","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Multiple-stationary-bodies","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"Adding multiple bodies to a problem is easy, using the concept of a BodyList. Here, we demonstrate this with a problem with multiple stationary bodies.","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"CurrentModule = ViscousFlow","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"using ViscousFlow","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"using Plots\nusing Statistics","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"In this example, we will set up a problem with three cylinders arranged in a formation in a free stream.","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"my_params = Dict()\nmy_params[\"Re\"] = 200\nmy_params[\"freestream speed\"] = 1.0\nmy_params[\"freestream angle\"] = 0.0","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"Set up the domain and surface point spacing","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"xlim = (-2.0,4.0)\nylim = (-2.0,2.0)\nmy_params[\"grid Re\"] = 4.0\ng = setup_grid(xlim,ylim,my_params)\nΔs = surface_point_spacing(g,my_params)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Set-up-bodies","page":"Multiple stationary bodies","title":"Set up bodies","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"We start by initializing a BodyList, and then pushing bodies onto the list. For each body, we create a joint that will attach it to the inertial system. Each joint requires a MotionTransform to configure it, and now, a second argument that specifies which body we are joining.","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"bl = BodyList()","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"Place the first body at (-1,0)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"push!(bl,Circle(0.5,Δs))\njoint1 = Joint(MotionTransform([-1,0],0),1);\nnothing #hide","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"Place the second body at (1,-1)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"push!(bl,Circle(0.5,Δs))\njoint2 = Joint(MotionTransform([1,-1],0),2);\nnothing #hide","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"and place the third body at (1,1)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"push!(bl,Circle(0.5,Δs))\njoint3 = Joint(MotionTransform([1,1],0),3);\nnothing #hide","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"Perform the actual transformation. Note that we are using the same  functions as in the case of a single body, but now with vectors of joints and bodies.  update_body! changes each body in the list in-place:","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"m = RigidBodyMotion([joint1,joint2,joint3],bl)\nx = init_motion_state(bl,m)\nupdate_body!(bl,x,m)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Plot-the-initial-configuration-of-the-bodies","page":"Multiple stationary bodies","title":"Plot the initial configuration of the bodies","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"Just to check they are in the right places","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"plot(bl,xlim=xlim,ylim=ylim)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Construct-the-system-structure","page":"Multiple stationary bodies","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"We construct the system with the same syntax as for a single body:","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"sys = viscousflow_system(g,bl,phys_params=my_params,motions=m);\nnothing #hide","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"u0 = init_sol(sys)\ntspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Solve","page":"Multiple stationary bodies","title":"Solve","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"Here, we run it for a little while, just to demonstrate:","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"@time step!(integrator,2.0)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Examine","page":"Multiple stationary bodies","title":"Examine","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"Let's inspect the results","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"sol = integrator.sol\nplt = plot(layout = (1,3), size = (800, 200), legend=:false)\ntsnap = 0.0:1.0:2.0\nfor (i, t) in enumerate(tsnap)\n    plot!(plt[i],vorticity(sol,sys,t),sys,clim=(-10,10),levels=range(-10,10,length=30), color = :RdBu)\nend\nplt","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"Now we will examine the force on each body. Remember that, by default, the moment is computed about the center of each body's respective coordinate system.","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"mom1, fx1, fy1 = force(sol,sys,1)\nmom2, fx2, fy2 = force(sol,sys,2)\nmom3, fx3, fy3 = force(sol,sys,3);\nnothing #hide","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"plt = plot(layout = (2,1), size = (600, 400))\nplot!(plt[1],sol.t,2*fx1,xlim=(0,Inf),ylim=(0,4),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",label=\"Lead body\",title=\"Drag force\")\nplot!(plt[2],sol.t,2*fy1,xlim=(0,Inf),ylim=(-2,2),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",label=\"Lead body\",title=\"Side force\")\nplot!(plt[1],sol.t,2*fx2,xlim=(0,Inf),ylim=(0,4),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",label=\"Trailing body\",title=\"Drag force\")\nplot!(plt[2],sol.t,2*fy2,xlim=(0,Inf),ylim=(-2,2),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",label=\"Trailing body\",title=\"Side force\")","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"println(\"Mean drag coefficient on lead body = \", mean(2*fx1[3:end]))","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"println(\"Mean drag coefficient on trailing body = \", mean(2*fx2[3:end]))","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"Multiple stationary bodies","title":"Multiple stationary bodies","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"EditURL = \"../../../test/literate/2.-Basic-flow-with-a-stationary-body.jl\"","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Basic-flow-with-a-stationary-body","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"In this notebook we will simulate the flow past a stationary body.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"CurrentModule = ViscousFlow","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"using ViscousFlow","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"using Plots\nusing Statistics","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#The-basic-steps","page":"Basic flow with a stationary body","title":"The basic steps","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"From the previous notebook, we add one additional step:","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"Specify the problem: Set the Reynolds number, the free stream, and any other problem parameters\nDiscretize: Set up a solution domain, choose the grid Reynolds number and the critical time step limits\n***Set up bodies***: Create the body or bodies and specify their motions, if any\nConstruct the system structure: Create the operators that will be used to perform the simulation\nInitialize: Set the initial flow field and initialize the integrator\nSolve: Solve the flow field\nExamine: Examine the results","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"The rest of the steps are nearly the same as in the previous example.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"As before, we initialize the parameters dictionary:","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"my_params = Dict()","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Problem-specification","page":"Basic flow with a stationary body","title":"Problem specification","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"Set the Reynolds number and free stream. We will set the free stream to be in the x direction, with speed equal to 1.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"my_params[\"Re\"] = 200\nmy_params[\"freestream speed\"] = 1.0\nmy_params[\"freestream angle\"] = 0.0","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Discretize","page":"Basic flow with a stationary body","title":"Discretize","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"We set the grid Re to 4.0 here to get a quicker solution, though it is generally better to make this smaller (it defaults to 2.0).","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"xlim = (-1.0,5.0)\nylim = (-2.0,2.0)\nmy_params[\"grid Re\"] = 4.0\ng = setup_grid(xlim,ylim,my_params)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Set-up-bodies","page":"Basic flow with a stationary body","title":"Set up bodies","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"Here, we will set up a rectangle of half-height 0.5 and half-width 0.25 at 45 degrees angle of attack. We also need to supply the spacing between points. For this, we use the function surface_point_spacing","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"Δs = surface_point_spacing(g,my_params)\nbody = Rectangle(0.5,0.25,Δs)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"We place the body at a desired location and orientation by creating a joint. This joint \"joins\" the body to the inertial coordinate system. In order to create this joint and apply it, we first need to place the joint in the inertial coordinate system with a MotionTransform.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"cent = [0.0,0.0] # center of joint with respect to inertial system\nα = 45π/180 # angle of joint with respect to inertial system\nX = MotionTransform(cent,α)\njoint = Joint(X)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"The next two steps will seem unnecessarily cumbersome, but they reveal an important aspect of how this package treats surface motion. Every problem with bodies has joints, and every joint has at least one degree of freedom, even if none of these degrees of freedom is meant to vary in time.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"For this reason, we must always create a RigidBodyMotion object and a joint state vector, x, even if there is no motion. In this example, x is just a vector of 3 zeros (describing the angle, x, and y coordinates of the joint).","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"To set the body in place, we use update_body!(body,x,m). After the operation is applied, body is transformed to the correct location/orientation.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"m = RigidBodyMotion(joint,body)\nx = init_motion_state(body,m)\nupdate_body!(body,x,m)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"Let's plot it just to make sure","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"plot(body,xlim=xlim,ylim=ylim)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Construct-the-system-structure","page":"Basic flow with a stationary body","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"This step is like the previous notebook, but now we also provide the body as an argument. It is important to note that we have not provided any explicit information about the boundary conditions on our shape. It therefore assumes that we want to enforce zero velocity on the shape. We will show another example later in which we change this. Note that we have to supply the RigidBodyMotion object via the motions keyword.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"sys = viscousflow_system(g,body,phys_params=my_params,motions=m);\nnothing #hide","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Initialize","page":"Basic flow with a stationary body","title":"Initialize","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"Now, we initialize with zero vorticity. Note that we do this by calling init_sol with no argument except for sys itself.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"u0 = init_sol(sys)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"and now create the integrator, with a long enough time span to hold the whole solution history:","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"tspan = (0.0,20.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Solve","page":"Basic flow with a stationary body","title":"Solve","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"Now we are ready to solve the problem. Let's advance the solution to t = 1.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"@time step!(integrator,1.0)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Examine","page":"Basic flow with a stationary body","title":"Examine","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"Let's look at the flow field at the end of this interval","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"plot(\nplot(vorticity(integrator),sys,title=\"Vorticity\",clim=(-15,15),levels=range(-15,15,length=30), color = :RdBu,ylim=ylim),\nplot(streamfunction(integrator),sys,title=\"Streamlines\",ylim=ylim,color = :Black),\n    size=(700,300)\n    )","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Compute-the-moment-and-force-histories","page":"Basic flow with a stationary body","title":"Compute the moment and force histories","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"To do this, we supply the solution history sol, the system sys, and the index of the body (1).","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"sol = integrator.sol;\nmom, fx, fy = force(sol,sys,1);\nnothing #hide","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"Plot the histories. Note that we are actually plotting the drag and lift coefficient histories here: $ CD = \\dfrac{Fx}{\\frac{1}{2}\\rho U\\infty^2 L}, \\quad CL = \\dfrac{Fy}{\\frac{1}{2}\\rho U\\infty^2 L}, \\quad Cm = \\dfrac{M}{\\frac{1}{2}\\rho U\\infty^2 L^2} $ Since the quantities in this simulation are already scaled by rho, U_infty, and L (because rho has been scaled out of the equations, and the free stream speed is set to 1 and the height of the shape to 1), then we obtain these coefficients by simply dividing by 1/2, or equivalently, by multiplying by 2:","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"plot(\nplot(sol.t,2*fx,xlim=(0,Inf),ylim=(0,4),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",legend=:false),\nplot(sol.t,2*fy,xlim=(0,Inf),ylim=(-4,4),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",legend=:false),\nplot(sol.t,2*mom,xlim=(0,Inf),ylim=(-4,4),xlabel=\"Convective time\",ylabel=\"\\$C_m\\$\",legend=:false),\n    size=(800,350)\n)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"The mean drag and lift coefficients (omitting the first two steps) are","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"meanCD = mean(2*fx[3:end])","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"meanCL = mean(2*fy[3:end])","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"Basic flow with a stationary body","title":"Basic flow with a stationary body","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/functions/#Functions-and-types","page":"Functions and types","title":"Functions and types","text":"","category":"section"},{"location":"manual/functions/#Functions","page":"Functions and types","title":"Functions","text":"","category":"section"},{"location":"manual/functions/","page":"Functions and types","title":"Functions and types","text":"Modules = [ViscousFlow]\nOrder   = [:function]","category":"page"},{"location":"manual/functions/#ViscousFlow.evaluate_freestream-Tuple{Any, Any, Any}","page":"Functions and types","title":"ViscousFlow.evaluate_freestream","text":"evaluate_freestream(t,x,sys; [subtract_translation = true])\n\nProvide the components of the free stream velocity at time t. If the problem is set up in the rotational frame of reference, then this transforms the specified velocity and also subtracts the translational velocity of the center of rotation. (If subtract_translation = false, then it does not subtract this translation velocity.)\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.force-Tuple{Any, Any, Any}","page":"Functions and types","title":"ViscousFlow.force","text":"force(sol,sys,bodyi[;axes=0,reference_body=bodyi]) -> Tuple{Vector}\n\nCalculate the moment and force exerted by the fluid on body bodyi from the computational solution sol of system sys. It returns the force history as a tuple of arrays: one array for each component. If axes=0 (the default), then the components are provided in the inertial coordinate system. However, this can be changed to any body ID to provide the components in another system. The keyword force_reference determines which body's system the moment is taken about. By default, it is the body bodyi itself, but any other body can be specified, or the inertial system (by specifying 0).\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.moment-Tuple{Any, Any, Any}","page":"Functions and types","title":"ViscousFlow.moment","text":"moment(sol,sys,bodyi[;center=(0,0)]) -> Vector\n\nCalculated the momemt exerted by the fluid on body bodyi from the computational solution sol of system sys. It returns the moment history as an array. The moment is calculated about center center, which defaults to (0,0) in whichever coordinate system the problem is solved.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.power-Tuple{Any, Any, Any}","page":"Functions and types","title":"ViscousFlow.power","text":"power(sol,sys,bodyi;include_freestream=false)\n\nCalculate the history of the total rate of work done by the flow on body bodyi (or on the flow by the body, if negative) from the computational solution sol of system sys. If freestream=false (default), then the free stream is not subtracted from the translational velocity in the calculation. If it is true, then the translational part of power is based on translational velocity minus the free stream (i.e., a reference frame at rest at infinity).\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.setup_grid-Tuple{Tuple, Tuple, Any}","page":"Functions and types","title":"ViscousFlow.setup_grid","text":"setup_grid(xlim::Tuple,ylim::Tuple,phys_params::Dict[;nthreads_max=length(Sys.cpu_info())])\n\nConstruct a Cartesian grid with limits xlim and ylim and spacing determined by the Reynolds number in the phys_params. The maximum number of threads can be optionally set; it defaults to the number of processor cores.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.surface_point_spacing-Tuple{PhysicalGrid, Any}","page":"Functions and types","title":"ViscousFlow.surface_point_spacing","text":"surface_point_spacing(g::PhysicalGrid,phys_params)\n\nCalculate the surface point spacing for a given grid, using the specified parameter \"point spacing ratio\" in the physical parameters, or the default value (1.4) if not specified.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.velocity_rel_to_inertial_frame!-Tuple{Edges{Primal}, Vararg{Any, 5}}","page":"Functions and types","title":"ViscousFlow.velocity_rel_to_inertial_frame!","text":"velocity_rel_to_inertial_frame!(u_prime,x,t,base_cache,phys_params,motions)\n\nChanges the input velocity u_prime (u', which is measured relative to the translating frame) to u (measured relative to the inertial frame, but expressed in rotating coordinates). Note that the inertial frame has zero velocity at infinity, so any free stream is also removed here.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.velocity_rel_to_rotating_frame!-Tuple{Edges{Primal}, Vararg{Any, 5}}","page":"Functions and types","title":"ViscousFlow.velocity_rel_to_rotating_frame!","text":"velocity_rel_to_rotating_frame!(u_prime,x,t,base_cache,phys_params,motions)\n\nChanges the input velocity u_prime (u', which is measured relative to the translating frame) to û (measured relative to the translating/rotating frame)\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.viscousflow_system-Tuple","page":"Functions and types","title":"ViscousFlow.viscousflow_system","text":"viscousflow_system(grid,[bodies];kwargs...)\n\nConstruct the operators and cache variables for a viscous flow problem.\n\nThe kwargs are the optional keyword aguments. There are several, some of which are crucial for certain types of problems.\n\nddftype = to set the DDF type. The default is CartesianGrids.Yang3.\nscaling = to set the scaling type, GridScaling (default) or IndexScaling.\ndtype = to set the element type to Float64 (default) or ComplexF64.\nphys_params = A dictionary to pass in physical parameters, or to pass in                 alternative models for the freestream velocity (with the \"freestream\" key)\nbc = A dictionary to pass in boundary condition data or functions, using \"external\"         and \"internal\" keys to pass in functions that provide the         corresponding surface data outside and inside the surface(s).\nforcing = A dictionary to pass in forcing models (via the \"forcing models\" key)\nmotions = to provide function(s) that specify the velocity of the immersed surface(s).\nreference_body = to solve the problem in a reference frame attached to a body rather than             the inertial frame (with is the default, with body number 0).\ntimestep_func = to pass in a function for time-dependent problems that provides the time-step size.                 It is expected that this function takes in two arguments,                 the grid::PhysicalGrid and phys_params, and returns the time step.                 It defaults to the basic Fourier/CFL type function default_timestep\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#Types","page":"Functions and types","title":"Types","text":"","category":"section"},{"location":"manual/functions/","page":"Functions and types","title":"Functions and types","text":"Modules = [ViscousFlow]\nOrder   = [:type]","category":"page"},{"location":"manual/functions/#ViscousFlow.ViscousIncompressibleFlowProblem","page":"Functions and types","title":"ViscousFlow.ViscousIncompressibleFlowProblem","text":"ViscousIncompressibleFlowProblem\n\nILM problem type dealing with vector-type data.\n\n\n\n\n\n","category":"type"},{"location":"manual/functions/#Index","page":"Functions and types","title":"Index","text":"","category":"section"},{"location":"manual/functions/","page":"Functions and types","title":"Functions and types","text":"Pages = [\"functions.md\"]","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"EditURL = \"../../../test/literate/5.-Moving-reference-frame.jl\"","category":"page"},{"location":"manual/5.-Moving-reference-frame/#Moving-reference-frame","page":"Moving reference frame","title":"Moving reference frame","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"CurrentModule = ViscousFlow","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"As will be discussed in Viscous flow about moving bodies, it is slower to solve the problem when the body moves in our frame of reference, because it requires re-generating the grid operations at each time step. However, when we only have a single rigid body, we can solve the problem in a frame of reference moving with the body. In this manner, the body remains invariantly mmersed in the grid, so the problem is faster to solve.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"We will demonstrate how to solve a problem in a moving reference frame in this notebook. First, we need some notation, given by the diagram below:","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"(Image: comoving-diagram.svg)","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"The main idea is that we wish to solve the problem in the (hatxhaty) reference frame, moving with the body. In that reference frame, the translational mathbfU_p and rotational Omega motion of the body appear as effects at infinity. This is fine for the translational part – it's equivalent to a freestream velocity. However, it is problematic for the rotational part in external flows, because the velocity's magnitude grows with distance from the center of rotation. Instead, we solve for the velocity expressed relative to the translating frame, but not the rotating frame. However, the components of this velocity are still expressed in the rotating coordinate system, hatx and haty, which is the key to allowing us to keep the body fixed in the computational domain.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Mathematically, we write this velocity as mathbfu = R^T (mathbfu - mathbfU_p). where R is the rotation operator from the rotating to the inertial coordinate system. The boundary conditions on mathbfu are -R^T mathbfU_p at infinity (a freestream), and mathbfu = Omega times (mathbfx-mathbfX_p) on the surface of the body.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"To set the problem up, we simply need to supply the kinematics of the motion, and to provide an additional argument reference_body = 1, which signals that we wish to solve the problem in a coordinate system moving with body 1. The default value of this argument is 0, the inertial coordinate system.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Here, we will demonstrate this on a problem involving the flapping of a flat plate. (This is a simple model for hovering insect flight, if you're interested!)","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"using ViscousFlow","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"using Plots","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Let's define a macro that allows us to visualize the kinematics of the body from the perspective of the inertial reference frame.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"macro animate_motion(b,m,dt,tmax,xlim,ylim)\n    return esc(quote\n            bc = deepcopy($b)\n            t0, x0 = 0.0, init_motion_state(bc,$m)\n            dxdt = zero(x0)\n            x = copy(x0)\n            @gif for t in t0:$dt:t0+$tmax\n                motion_rhs!(dxdt,x,($m,bc),t)\n                global x += dxdt*$dt\n                update_body!(bc,x,$m)\n                plot(bc,xlims=$xlim,ylims=$ylim)\n            end every 5\n        end)\nend","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Set the Reynolds number","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"my_params=Dict()\nmy_params[\"Re\"] = 100","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Create a domain big enough to hold the vorticity. We will loosen the grid Re a bit.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"xlim = (-4.0,4.0)\nylim = (-3.5,2.0)\nmy_params[\"grid Re\"] = 3.0\ng = setup_grid(xlim,ylim,my_params)","category":"page"},{"location":"manual/5.-Moving-reference-frame/#Create-the-plate","page":"Moving reference frame","title":"Create the plate","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"We create the body as usual. However, in order to facilitate the kinematics that follow, it is helpful to change the body's intrinsic coordinate system from its default system – in which the plate lies along its own x axis – to another system in which the plate lies along its y axis. This is not necessary, but it has some benefits for prescribing the motion and for visualizing the results.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"To make this change of body coordinate system, we use the transform_body! function. This is different from update_body!, because the latter only changes the body's placement in the inertial system. To use the function, we specify a MotionTransform with where we want the plate to lie and at what angle.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Δs = surface_point_spacing(g,my_params)\nbody = Plate(1.0,Δs)\nX = MotionTransform([0,0],π/2)\ntransform_body!(body,X)","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Plot it, just to check.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"plot(body,xlim=xlim,ylim=ylim)","category":"page"},{"location":"manual/5.-Moving-reference-frame/#Set-the-kinematics","page":"Moving reference frame","title":"Set the kinematics","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Here, we will define the kinematics. The wing will pitch about an axis at its top edge, as in the figure below","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"(Image: flat-plate-diagram.svg)","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Thus, hatX_p = (005c). Since the length of the plate is 1, we are implicitly scaling the problem by c, so we will set this joint at (005) in these coordinates.","category":"page"},{"location":"manual/5.-Moving-reference-frame/#The-joint-placement","page":"Moving reference frame","title":"The joint placement","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"We must specify the joint, attaching body 1 (the child) to the inertial system (body 0, the parent). We need a more detailed form of the Joint function now. In this form, we need to specify how the joint is attached to each body, and how each of its degrees of freedom move. We will do this piece by piece to explain it. More details can be found in the documentation for RigidBodyTools.jl.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"To place the joint, we need to specify its position in both the parent's and the child's coordinate systems. In the parent's system, we can just place it at the origin, with no rotation. For the child, we place the joint as desired, at (005).","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"parent_body, child_body = 0, 1\nXp = MotionTransform([0,0],0) # transform from inertial system to joint\nxpiv = [0.0,0.5]\nXc = MotionTransform(xpiv,0.0)","category":"page"},{"location":"manual/5.-Moving-reference-frame/#The-kinematics","page":"Moving reference frame","title":"The kinematics","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"We are creating a joint that has three potential degrees of freedom (angle, x, y), called a FreeJoint2d. However, only the angle and x coordinates of the joint will be allowed to move. Both of these are assigned oscillatory kinematics.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Ω = π/2 # Flapping angular frequency\nTp = 2π/Ω # Period of flapping\nΔα = π/4 # Amplitude of pitching\nϕα = 0 # Pitching phase\nadof = OscillatoryDOF(Δα,Ω,ϕα,0.0)","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"The motion of the x coordinate","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"A = 1 # Heaving amplitude\nϕ = -π/2 # Phase lag\nxdof = OscillatoryDOF(A,Ω,ϕ,0.0)\n\nydof = ConstantVelocityDOF(0) # Keep the y coordinate fixed","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"We put the kinematics into a vector. The degrees of freedom are always ordered [rotation, x, y].","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"dofs = [adof,xdof,ydof]","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Finally, create the joint and the motion structure.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"joint = Joint(FreeJoint2d,parent_body,Xp,child_body,Xc,dofs)\nm = RigidBodyMotion(joint,body)","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Now animate the motion for a complete cycle (4 time units)","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"@animate_motion body m Tp/200 Tp xlim ylim","category":"page"},{"location":"manual/5.-Moving-reference-frame/#Boundary-condition-functions","page":"Moving reference frame","title":"Boundary condition functions","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Instead of using the default boundary condition functions, we define special ones here that provide the instantaneous surface velocity (i.e. the velocity of every surface point) from the prescribed motion. Every surface has an \"exterior\" and \"interior\" side. For a flat plate, these two sides are the upper and lower sides, and both sides are next to the fluid, so both of them are assigned the prescribed velocity of the plate. (For closed bodies, we would assign this velocity to only one of the sides, and zero to the other side. We will see an example of this in a later case.) We pack these into a special dictionary and pass these to the system construction.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"We need to provide specialized boundary conditions for this problem, and we use the function surface_velocity_in_translating_frame! for that. Because we are simulating a flat plate, both the positive and negative sides of the surface must have their boundary velocities set the same way. If this were instead a closed body, we would set either the positive or negative side's value to zero. We pack these into a special dictionary and pass these to the system construction.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"function my_vsplus(t,x,base_cache,phys_params,motions)\n  vsplus = zeros_surface(base_cache)\n  surface_velocity_in_translating_frame!(vsplus,x,base_cache,motions,t)\n  return vsplus\nend\n\nfunction my_vsminus(t,x,base_cache,phys_params,motions)\n  vsminus = zeros_surface(base_cache)\n  surface_velocity_in_translating_frame!(vsminus,x,base_cache,motions,t)\n  return vsminus\nend\n\nbcdict = Dict(\"exterior\" => my_vsplus, \"interior\" => my_vsminus)","category":"page"},{"location":"manual/5.-Moving-reference-frame/#Construct-the-system-structure","page":"Moving reference frame","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Here, we supply both the motion, the boundary condition functions, and the reference body as additional arguments.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"sys = viscousflow_system(g,body,phys_params=my_params,bc=bcdict,motions=m,reference_body=1);\nnothing #hide","category":"page"},{"location":"manual/5.-Moving-reference-frame/#Set-up-the-initial-conditions","page":"Moving reference frame","title":"Set up the initial conditions","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"This is done the usual way","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"u0 = init_sol(sys)\ntspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/5.-Moving-reference-frame/#Solve-the-problem","page":"Moving reference frame","title":"Solve the problem","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Here, we will advance it for one flapping period","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"step!(integrator,Tp)","category":"page"},{"location":"manual/5.-Moving-reference-frame/#Plot-it","page":"Moving reference frame","title":"Plot it","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Plot the vorticity field","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"sol = integrator.sol\nplt = plot(layout = (4,3), size = (900, 900), legend=:false)\ntsnap = Tp/12:Tp/12:Tp\nfor (i, t) in enumerate(tsnap)\n    plot!(plt[i],vorticity(sol,sys,t),sys,clim=(-20,20),levels=range(-20,20,length=16),ylim=(-3.5,1.5),title=\"$(round(t/Tp,digits=4))Tp\")\nend\nplt","category":"page"},{"location":"manual/5.-Moving-reference-frame/#Plot-the-forces-and-moments","page":"Moving reference frame","title":"Plot the forces and moments","text":"","category":"section"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"The solution is expressed in co-rotating coordinates. To get the force and moment in inertial coordinates, we make use of the axes keyword, setting it to 0. The moment is computed about the center of the body's coordinate system, but we can change that behavior by using the force_reference keyword, setting it to 0, for example, to compute the moment about the origin of the inertial system.","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"mom, fx, fy = force(sol,sys,1,axes=0);\nnothing #hide","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"Plot these","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"plot(\nplot(sol.t/Tp,2*fx/Ω^2,xlim=(0,Inf),ylim=(-5,5),xlabel=\"\\$t/T_p\\$\",ylabel=\"\\$C_D\\$\",legend=:false),\nplot(sol.t/Tp,2*fy/Ω^2,xlim=(0,Inf),ylim=(-2,5),xlabel=\"\\$t/T_p\\$\",ylabel=\"\\$C_L\\$\",legend=:false),\nplot(sol.t/Tp,2*mom/Ω^2,xlim=(0,Inf),ylim=(-2,2),xlabel=\"\\$t/T_p\\$\",ylabel=\"\\$C_m\\$\",legend=:false),\n    size=(800,350)\n)","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"","category":"page"},{"location":"manual/5.-Moving-reference-frame/","page":"Moving reference frame","title":"Moving reference frame","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"EditURL = \"../../../test/literate/6.-Viscous-flow-about-a-moving-body.jl\"","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/#Viscous-flow-about-moving-bodies","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"","category":"section"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"In this notebook we will demonstrate the simulation of a system of moving bodies. As we will show, it is straightforward to set up a moving body, using the tools in RigidBodyTools.jl. The main caveat is that the simulation is slower, because the integrator must update the operators continuously throughout the simulation.","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"We will demonstrate this on a system of three linked plates undergoing a flapping motion, in which the middle plate heaves up and down, and the other two bodies pitch back and forth on hinges connecting their edges to the middle plate.","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"CurrentModule = ViscousFlow","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"using ViscousFlow","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"using Plots","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/#Problem-specification-and-discretization","page":"Viscous flow about moving bodies","title":"Problem specification and discretization","text":"","category":"section"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"For simplicity, we will not create a free stream in this problem. Everything here is the usual.","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"my_params = Dict()\nmy_params[\"Re\"] = 200","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"xlim = (-1.0,1.0)\nylim = (-1.0,1.0)\nmy_params[\"grid Re\"] = 4.0\ng = setup_grid(xlim,ylim,my_params)\n\nΔs = surface_point_spacing(g,my_params)","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/#Set-up-body","page":"Viscous flow about moving bodies","title":"Set up body","text":"","category":"section"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Set up the plates.","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Lp = 0.5\nbody1 = Plate(Lp,Δs)\nbody2 = Plate(Lp,Δs)\nbody3 = Plate(Lp,Δs)\nbl = BodyList([body1,body2,body3])","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/#Set-the-body-motions","page":"Viscous flow about moving bodies","title":"Set the body motions","text":"","category":"section"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Here, we make use of joints to prescribe the motion of every part of this system. We will attach body 1 to the inertial system, making it oscillate up and down. This is a special case of a joint with three degrees of freedom, called a FreeJoint2d. Bodies 2 and 3 will each be connected by hinges (i.e., with a RevoluteJoint) to body 1.","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"parent_body, child_body = 0, 1\nXp = MotionTransform([0,0],0) # location of joint in inertial system\nxpiv = [0,0] # place center of motion at center of the plate\nXc = MotionTransform(xpiv,0)","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Now the motion for joint 1, which we set up through the three degrees of freedom.  The first and second are meant to be fixed, so we give them zero velocity, and the third we assign oscillatory kinematics","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"adof = ConstantVelocityDOF(0.0)\nxdof = ConstantVelocityDOF(0.0)\n\nΩ = 1\nA = 0.25  # amplitude/chord\nϕh = 0.0  # phase lag of heave\nydof = OscillatoryDOF(A,Ω,ϕh,0.0)\n\ndofs = [adof,xdof,ydof]","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Now assemble the joint","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"joint1 = Joint(FreeJoint2d,parent_body,Xp,child_body,Xc,dofs)","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Now the two hinges. Each of these is a RevoluteJoint. We place them at either end of body 1. Joint 2 between bodies 1 and 2","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"parent_body, child_body = 1, 2\nXp = MotionTransform([0.25,0],0) # right side of body 1\nXc = MotionTransform([-0.25,0],0) # left side of body 2\nΔα = 20π/180 # amplitude of pitching\nϕp = π/2 # phase lead of pitch\nθdof = OscillatoryDOF(Δα,Ω,ϕp,0.0)\njoint2 = Joint(RevoluteJoint,parent_body,Xp,child_body,Xc,[θdof])","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"and joint 3 between bodies 1 and 3","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"parent_body, child_body = 1, 3\nXp = MotionTransform([-0.25,0],0) # left side of body 1\nXc = MotionTransform([0.25,0],0) # right side of body 3\nϕp = -π/2 # phase lead of pitch, but lagging rather than leading\nθdof = OscillatoryDOF(Δα,Ω,ϕp,0.0)\njoint3 = Joint(RevoluteJoint,parent_body,Xp,child_body,Xc,[θdof])","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Assemble everything together","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"m = RigidBodyMotion([joint1,joint2,joint3],bl)","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"We generate the initial joint state vector with `init_and update the body system and plot it","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"x = init_motion_state(bl,m)\nupdate_body!(bl,x,m)\nplot(bl,xlim=xlim,ylim=ylim)","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Here is a useful macro to visualize the motion as a movie:","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"macro animate_motion(b,m,dt,tmax,xlim,ylim)\n    return esc(quote\n            bc = deepcopy($b)\n            t0, x0 = 0.0, init_motion_state(bc,$m)\n            dxdt = zero(x0)\n            x = copy(x0)\n\n            @gif for t in t0:$dt:t0+$tmax\n                motion_rhs!(dxdt,x,($m,bc),t)\n                global x += dxdt*$dt\n                update_body!(bc,x,$m)\n                plot(bc,xlim=$xlim,ylim=$ylim)\n            end every 5\n        end)\nend","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/#Define-the-boundary-condition-functions","page":"Viscous flow about moving bodies","title":"Define the boundary condition functions","text":"","category":"section"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Instead of using the default boundary condition functions, we define special ones here that provide the instantaneous surface velocity (i.e. the velocity of every surface point) from the prescribed motion. Every surface has an \"exterior\" and \"interior\" side. For a flat plate, these two sides are the upper and lower sides, and both sides are next to the fluid, so both of them are assigned the prescribed velocity of the plate. (For closed bodies, we would assign this velocity to only one of the sides, and zero to the other side. We will see an example of this in a later case.) We pack these into a special dictionary and pass these to the system construction.","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"function my_vsplus(t,x,base_cache,phys_params,motions)\n  vsplus = zeros_surface(base_cache)\n  surface_velocity!(vsplus,x,base_cache,motions,t)\n  return vsplus\nend\n\nfunction my_vsminus(t,x,base_cache,phys_params,motions)\n  vsminus = zeros_surface(base_cache)\n  surface_velocity!(vsminus,x,base_cache,motions,t)\n  return vsminus\nend\n\nbcdict = Dict(\"exterior\" => my_vsplus, \"interior\" => my_vsminus)","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/#Construct-the-system-structure","page":"Viscous flow about moving bodies","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Here, we supply both the motion and boundary condition functions as additional arguments.","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"sys = viscousflow_system(g,bl,phys_params=my_params,motions=m,bc=bcdict);\nnothing #hide","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"and generate the initial condition","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"u0 = init_sol(sys)","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Before we solve the problem, it is useful to note that the Reynolds number we specified earlier may not be the most physically-meaningful Reynolds number. More relevant in this problem is the Reynolds number based on the maximum body speed and the total length of the plates","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Umax, imax, tmax, bmax = maxvelocity(u0,sys)\nL = 3*Lp\nRe_eff = my_params[\"Re\"]*Umax*L","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"In other problems, we have stored the inverse of the matrix system that we have to solve at each time stage. But since that matrix system changes as the body moves, it is faster here to use an iterative solver (congjugate gradient)","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"tspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys,alg=LiskaIFHERK(saddlesolver=CG))","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/#Solve","page":"Viscous flow about moving bodies","title":"Solve","text":"","category":"section"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"This takes a bit longer per time step than it does for stationary bodies. Here, we will   advance it one time step (which also compiles the code), then only run it for 1.5 time   units just to demonstrate it.","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"step!(integrator)\n@time step!(integrator,1.5)","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/#Examine-the-solution","page":"Viscous flow about moving bodies","title":"Examine the solution","text":"","category":"section"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"Let's look at a few snapshots of the vorticity field. Note that the plotting here requires us to explicitly call the surfaces function to generate the instantaneous configuration of the plate.","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"sol = integrator.sol\nplt = plot(layout = (1,3), size = (800, 300), legend=:false)\ntsnap = 0.5:0.5:1.5\nfor (i, t) in enumerate(tsnap)\n    plot!(plt[i],vorticity(sol,sys,t),sys,layers=false,title=\"t = $(round(t,digits=2))\",clim=(-5,5),levels=range(-5,5,length=30),color = :RdBu)\n    plot!(plt[i],surfaces(sol,sys,t))\nend\nplt","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"and the forces and moments","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"sol = integrator.sol\nmom, fx, fy = force(sol,sys,1);\nnothing #hide","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"plot(\nplot(sol.t,2*fx,xlim=(0,Inf),ylim=(-2,2),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",legend=:false),\nplot(sol.t,2*fy,xlim=(0,Inf),ylim=(-2,2),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",legend=:false),\n    size=(800,350)\n)","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"","category":"page"},{"location":"manual/6.-Viscous-flow-about-a-moving-body/","page":"Viscous flow about moving bodies","title":"Viscous flow about moving bodies","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#ViscousFlow.jl","page":"Home","title":"ViscousFlow.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"a framework for simulating viscous incompressible flows","category":"page"},{"location":"","page":"Home","title":"Home","text":"The objective of this package is to allow easy setup and fast simulation of incompressible flows, particularly those past bodies in motion. The package provides tools for","category":"page"},{"location":"","page":"Home","title":"Home","text":"constructing grids and body shapes,\nspecifying the relevant parameters and setting their values,\nsolving the problem, and finally,\nvisualizing and analyzing the results.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The underlying grids are uniform and Cartesian, making use of the CartesianGrids package. This package allows the use of the lattice Green's function (LGF) for inverting the Poisson equation; the diffusion operators are solved with the integrating factor (Liska and Colonius [2]). Many of the core aspects of the fluid-body interaction are based on the Method of Immersed Layers [1], ImmersedLayers, which is an extension of the immersed boundary projection method [3]. The solver is implemented with the ConstrainedSystems package. Tools for creating bodies and their motions are based on the RigidBodyTools package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package works on Julia 1.4 and above and is registered in the general Julia registry. To install from the REPL, type e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add ViscousFlow","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, in any version, type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using ViscousFlow","category":"page"},{"location":"","page":"Home","title":"Home","text":"The plots in this documentation are generated using Plots.jl. You might want to install that, too, to follow the examples.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]: Eldredge, J. D. (2022) \"A method of immersed layers on Cartesian grids, with application to incompressible flows,\" Journal of Computational Physics 448: 110716.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2]: Liska, S. and Colonius, T. (2017) \"A fast immersed boundary method for external incompressible viscous flows using lattice Green's functions,\" J. Comput. Phys., 331, 257–279.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[3]: Taira, K. and Colonius, T. (2007) \"The immersed boundary method: a projection approach,\" J. Comput. Phys., 225, 2118–2137.","category":"page"}]
}
