var documenterSearchIndex = {"docs":
[{"location":"manual/functions/#Functions-and-types","page":"Functions and types","title":"Functions and types","text":"","category":"section"},{"location":"manual/functions/#Functions","page":"Functions and types","title":"Functions","text":"","category":"section"},{"location":"manual/functions/","page":"Functions and types","title":"Functions and types","text":"Modules = [ViscousFlow]\nOrder   = [:function]","category":"page"},{"location":"manual/functions/#Base.size-Union{Tuple{NY}, Tuple{NX}, Tuple{NavierStokes{NX, NY, N, MT, FS, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {N, MT<:ViscousFlow.PointMotionType, FS<:ViscousFlow.FreestreamType, SD<:ViscousFlow.FlowSide, DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}, Int64}} where {NX, NY}","page":"Functions and types","title":"Base.size","text":"size(sys::NavierStokes,d::Int) -> Int\n\nReturn the number of indices of the grid used by sys along dimension d.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#Base.size-Union{Tuple{NavierStokes{NX, NY, N, MT, FS, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {N, MT<:ViscousFlow.PointMotionType, FS<:ViscousFlow.FreestreamType, SD<:ViscousFlow.FlowSide, DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}}, Tuple{NY}, Tuple{NX}} where {NX, NY}","page":"Functions and types","title":"Base.size","text":"size(sys::NavierStokes) -> Tuple{Int,Int}\n\nReturn a tuple of the number of indices of the grid used by sys\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#CartesianGrids.cellsize-Tuple{NavierStokes}","page":"Functions and types","title":"CartesianGrids.cellsize","text":"cellsize(sys::NavierStokes) -> Float64\n\nReturn the grid cell size of system sys\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#CartesianGrids.origin-Tuple{NavierStokes}","page":"Functions and types","title":"CartesianGrids.origin","text":"origin(sys::NavierStokes) -> Tuple{Int,Int}\n\nReturn a tuple of the indices of the primal node that corresponds to the physical origin of the coordinate system used by sys. Note that these indices need not lie inside the range of indices occupied by the grid. For example, if the range of physical coordinates occupied by the grid is (1.0,3.0) x (2.0,4.0), then the origin is not inside the grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#RigidBodyTools.assign_velocity!-Tuple{AbstractVector{Float64}, AbstractVector{Float64}, Body, ViscousFlow.LidDrivenCavity, Real}","page":"Functions and types","title":"RigidBodyTools.assign_velocity!","text":"assign_velocity!(u,v,x,y,m::DirectlySpecifiedMotion,t)\n\nGiven a DirectlySpecifiedMotion, vectors of x and y coordinates, and time t, return the velocities u and v at those points.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.convective_derivative","page":"Functions and types","title":"ViscousFlow.convective_derivative","text":"convective_derivative(integrator)\n\nReturn the convective derivative associated with integrator at its current state.\n\n\n\n\n\n","category":"function"},{"location":"manual/functions/#ViscousFlow.convective_derivative-Union{Tuple{NY}, Tuple{NX}, Tuple{Edges{Primal, NX, NY, T, DT} where {T<:Number, DT}, NavierStokes{NX, NY, N, MT, FS, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {N, MT<:ViscousFlow.PointMotionType, FS<:ViscousFlow.FreestreamType, SD<:ViscousFlow.FlowSide, DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}, Real}} where {NX, NY}","page":"Functions and types","title":"ViscousFlow.convective_derivative","text":"convective_derivative(sol::ODESolution,sys::NavierStokes,t)\n\nReturn the convective derivative associated with solution vector sol on the grid in sys, at time(s) t.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.flowside-Union{Tuple{NavierStokes{NX, NY, N, MT, FS, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}}, Tuple{SD}, Tuple{FS}, Tuple{MT}, Tuple{N}, Tuple{NY}, Tuple{NX}} where {NX, NY, N, MT, FS, SD}","page":"Functions and types","title":"ViscousFlow.flowside","text":"flowside(sys::NavierStokes) -> FlowSide\n\nReturns the side of the body on which the flow is to be computed.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.force-Tuple{ODESolution, NavierStokes, Int64}","page":"Functions and types","title":"ViscousFlow.force","text":"force(sol,sys::NavierStokes,bodyindex) -> Tuple{Vector,Vector}\n\nGiven the solution history vector sol and the system sys, return the force history on the body with index bodyindex as a tuple of vectors, one for each component.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.force-Tuple{OrdinaryDiffEq.ODEIntegrator, Any}","page":"Functions and types","title":"ViscousFlow.force","text":"force(integ,bodyindex)\n\nGiven the state of the system in integrator integ, return the current force on the body with index bodyindex.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.freestream-Union{Tuple{MT}, Tuple{N}, Tuple{NY}, Tuple{NX}, Tuple{Real, NavierStokes{NX, NY, N, MT, ViscousFlow.StaticFreestream, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {SD<:ViscousFlow.FlowSide, DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}}} where {NX, NY, N, MT}","page":"Functions and types","title":"ViscousFlow.freestream","text":"freestream(t,sys::NavierStokes) -> Tuple\n\nReturn the value of the freestream in sys at time t as a tuple.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.moment-Tuple{ODESolution, NavierStokes, Int64}","page":"Functions and types","title":"ViscousFlow.moment","text":"moment(sol,sys::NavierStokes,bodyindex[,center=(0,0)]) -> Vector\n\nGiven the solution history vector sol and the system sys, return the moment history on the body with index bodyindex as a vector. The center of the moment can be passed as an optional tuple argument.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.moment-Tuple{OrdinaryDiffEq.ODEIntegrator, Any}","page":"Functions and types","title":"ViscousFlow.moment","text":"moment(integ,bodyindex[,center=(0,0))\n\nGiven the state of the system in integrator integ, return the current moment on the body with index bodyindex.  The center of the moment can be passed as an optional tuple argument.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.newstate-Tuple{AbstractSpatialField, NavierStokes}","page":"Functions and types","title":"ViscousFlow.newstate","text":"newstate(s::AbstractSpatialField,sys::NavierStokes)\n\nReturn an instance of the state vector for sys, assigned the data in the spatial field s.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.newstate-Tuple{NavierStokes}","page":"Functions and types","title":"ViscousFlow.newstate","text":"newstate(sys::NavierStokes)\n\nReturn a new (zero) instance of the state vector for sys.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.pressure","page":"Functions and types","title":"ViscousFlow.pressure","text":"pressure(integrator)\n\nReturn the pressure field associated with integrator at its current state.\n\n\n\n\n\n","category":"function"},{"location":"manual/functions/#ViscousFlow.pressure-Union{Tuple{NY}, Tuple{NX}, Tuple{RecursiveArrayTools.ArrayPartition, NavierStokes{NX, NY, N, MT, FS, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {N, MT<:ViscousFlow.PointMotionType, FS<:ViscousFlow.FreestreamType, SD<:ViscousFlow.FlowSide, DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}, Any}} where {NX, NY}","page":"Functions and types","title":"ViscousFlow.pressure","text":"pressure(sol::ODESolution,sys::NavierStokes,t)\n\nReturn the pressure field associated with solution vector sol on the grid in sys, at time(s) t.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.pressurejump","page":"Functions and types","title":"ViscousFlow.pressurejump","text":"pressurejump(integrator)\n\nReturn the pressure jump at all of the surface points associated with integrator at its current state.\n\n\n\n\n\n","category":"function"},{"location":"manual/functions/#ViscousFlow.pressurejump-Union{Tuple{N}, Tuple{NY}, Tuple{NX}, Tuple{VectorData{N, T, DT} where {T, DT<:(AbstractVector{T} where T)}, NavierStokes{NX, NY, N, MT, FS, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {MT<:ViscousFlow.PointMotionType, FS<:ViscousFlow.FreestreamType, SD<:ViscousFlow.FlowSide, DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}, Any}} where {NX, NY, N}","page":"Functions and types","title":"ViscousFlow.pressurejump","text":"pressurejump(sol::ODESolution,sys::NavierStokes,t)\n\nReturn the pressure jump at all of the surface points associated with solution sol on grid in sys at time(s) t.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.scalarpotential","page":"Functions and types","title":"ViscousFlow.scalarpotential","text":"scalarpotential(integrator)\n\nReturn the scalar potential field associated with integrator at its current state.\n\n\n\n\n\n","category":"function"},{"location":"manual/functions/#ViscousFlow.scalarpotential-Union{Tuple{NY}, Tuple{NX}, Tuple{Nodes{Primal, NX, NY, T, DT} where {T<:Number, DT<:(AbstractMatrix{T} where T)}, NavierStokes{NX, NY, N, MT, FS, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {N, MT<:ViscousFlow.PointMotionType, FS<:ViscousFlow.FreestreamType, SD<:ViscousFlow.FlowSide, DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}, Real}} where {NX, NY}","page":"Functions and types","title":"ViscousFlow.scalarpotential","text":"scalarpotential(sol::ODESolution,sys::NavierStokes,t)\n\nReturn the scalar potential field associated with solution vector sol on the grid in sys, at time(s) t.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.setstepsizes-Tuple{Real}","page":"Functions and types","title":"ViscousFlow.setstepsizes","text":"setstepsizes(Re[,gridRe=2][,cfl=0.5][,fourier=0.5]) -> Float64, Float64\n\nSet the grid cell spacing and time step size based on the Reynolds number Re, the grid Reynolds number gridRe, cfl number cfl, and grid Fourier number fourier. The last three parameters all have default values.\n\nExample\n\nHere is an example of setting parameters based on Reynolds number 100 (with   default choices for grid Reynolds number, CFL number, and Fourier number):\n\njulia> Δx, Δt = setstepsizes(100)\n(0.02, 0.01)\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.streamfunction","page":"Functions and types","title":"ViscousFlow.streamfunction","text":"streamfunction(integrator)\n\nReturn the streamfunction field associated with integrator at its current state.\n\n\n\n\n\n","category":"function"},{"location":"manual/functions/#ViscousFlow.streamfunction-Union{Tuple{NY}, Tuple{NX}, Tuple{Nodes{Dual, NX, NY, T, DT} where {T<:Number, DT<:(AbstractMatrix{T} where T)}, NavierStokes{NX, NY, N, MT, FS, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {N, MT<:ViscousFlow.PointMotionType, FS<:ViscousFlow.FreestreamType, SD<:ViscousFlow.FlowSide, DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}, Real}} where {NX, NY}","page":"Functions and types","title":"ViscousFlow.streamfunction","text":"streamfunction(sol::ODESolution,sys::NavierStokes,t)\n\nReturn the streamfunction field associated with solution vector sol on the grid in sys, at time(s) t.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.timerange-Tuple{Any, Any}","page":"Functions and types","title":"ViscousFlow.timerange","text":"timerange(tf,sys::NavierStokes)\n\nCreate a range of times, starting at the t = Δt (the time step of sys), and ending at t = tf.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.timestep-Tuple{NavierStokes}","page":"Functions and types","title":"ViscousFlow.timestep","text":"timestep(sys::NavierStokes) -> Float64\n\nReturn the time step size of system sys\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.traction","page":"Functions and types","title":"ViscousFlow.traction","text":"traction(integrator)\n\nReturn the traction at all of the surface points associated with integrator at its current state.\n\n\n\n\n\n","category":"function"},{"location":"manual/functions/#ViscousFlow.traction-Union{Tuple{SD}, Tuple{FS}, Tuple{MT}, Tuple{NY}, Tuple{NX}, Tuple{Any, NavierStokes{NX, NY, 0, MT, FS, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}, Any}} where {NX, NY, MT, FS, SD}","page":"Functions and types","title":"ViscousFlow.traction","text":"traction(sol::ODESolution,sys::NavierStokes,t)\n\nReturn the traction at all of the surface points associated with solution sol on grid in sys at time(s) t.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.velocity","page":"Functions and types","title":"ViscousFlow.velocity","text":"velocity(integrator)\n\nReturn the velocity field associated with integrator at its current state.\n\n\n\n\n\n","category":"function"},{"location":"manual/functions/#ViscousFlow.velocity-Union{Tuple{NY}, Tuple{NX}, Tuple{Nodes{Dual, NX, NY, T, DT} where {T<:Number, DT<:(AbstractMatrix{T} where T)}, Vararg{Any, N} where N}} where {NX, NY}","page":"Functions and types","title":"ViscousFlow.velocity","text":"velocity(sol::ODESolution,sys::NavierStokes,t)\n\nReturn the velocity field associated with solution vector sol on the grid in sys, at time(s) t.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#ViscousFlow.vorticity","page":"Functions and types","title":"ViscousFlow.vorticity","text":"vorticity(integrator)\n\nReturn the vorticity field associated with integrator at its current state.\n\n\n\n\n\n","category":"function"},{"location":"manual/functions/#ViscousFlow.vorticity-Union{Tuple{NY}, Tuple{NX}, Tuple{Nodes{Dual, NX, NY, T, DT} where {T<:Number, DT<:(AbstractMatrix{T} where T)}, NavierStokes{NX, NY, N, MT, FS, SD, DDF, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT} where {N, MT<:ViscousFlow.PointMotionType, FS<:ViscousFlow.FreestreamType, SD<:ViscousFlow.FlowSide, DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}, Real}} where {NX, NY}","page":"Functions and types","title":"ViscousFlow.vorticity","text":"vorticity(sol::ODESolution,sys::NavierStokes,t)\n\nReturn the vorticity field associated with solution vector sol on the grid in sys, at time(s) t.\n\n\n\n\n\n","category":"method"},{"location":"manual/functions/#Types","page":"Functions and types","title":"Types","text":"","category":"section"},{"location":"manual/functions/","page":"Functions and types","title":"Functions and types","text":"Modules = [ViscousFlow]\nOrder   = [:type]","category":"page"},{"location":"manual/functions/#ViscousFlow.NavierStokes","page":"Functions and types","title":"ViscousFlow.NavierStokes","text":"mutable struct NavierStokes{NX, NY, N, MT<:ViscousFlow.PointMotionType, FS<:ViscousFlow.FreestreamType, SD<:ViscousFlow.FlowSide, DDF<:CartesianGrids.DDFType, FT, SP, WP, VP, SPP, GVP, VBP, SBP, FST, RHST, CDT, COT, DLT, VCT, PCT, SCT, SVCT, STCT}\n\nA system type that utilizes a grid of NX x NY dual cells and N Lagrange forcing points to solve the discrete Navier-Stokes equations in vorticity form. The parameter static_points specifies whether the forcing points remain static in the grid. It should be set to false if a supplied motion requires that the points move.\n\nConstructors:\n\nNavierStokes(Re,Δx,xlimits,ylimits,Δt               [,freestream = (0.0, 0.0)]               [,pulses=nothing]) specifies the Reynolds number Re, the grid               spacing Δx, the dimensions of the domain in the tuples xlimits               and ylimits (excluding the ghost cells), and the time step size Δt.               The other arguments are optional. The freestream argument can be               passed as either a tuple (a static freestream) or a RigidBodyMotion               for a time-varying freestream. The pulses argument can be               used to pass in one or more spatiotemporal pulses.\n\nNavierStokes(Re,Δx,xlimits,ylimits,Δt,bodies::Body/BodyList               [,flow_side=ExternalInternalFlow]               [,ddftype=CartesianGrids.Yang3]) passes the body               information. This constructor               sets the motions of the body/ies to be stationary.               The same optional arguments used for the basic constructor               also apply for this one. In addition, the flow_side can be set to               ExternalFlow (default), InternalFlow, or ExternalInternalFlow.               However, it is forced to ExternalInternalFlow for open Bodies               (like Plate type).\n\nNavierStokes(Re,Δx,xlimits,ylimits,Δt,bodies::Body/BodyList,               motions::Motion/MotionList               [,static_points=false])               passes the body and associated motion information.               The list of motions must be the same length as the list of bodies.               The same optional arguments used for the other constructors               also apply for this one. In addition, static_points can               be set to true if the supplied motion should not cause the               points to move.\n\n\n\n\n\n","category":"type"},{"location":"manual/functions/#Index","page":"Functions and types","title":"Index","text":"","category":"section"},{"location":"manual/functions/","page":"Functions and types","title":"Functions and types","text":"Pages = [\"functions.md\"]","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"EditURL = \"<unknown>/literate/7.-Lid-driven-cavity.jl\"","category":"page"},{"location":"manual/7.-Lid-driven-cavity/#.-Lid-Driven-Cavity-Flow","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"","category":"section"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"In this notebook we will simulate the flow with a top moving wall. To demonstrate this, we will solve for internal flow in a square cavity by enforcing no-slip at the walls.","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"using ViscousFlow","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"using Plots","category":"page"},{"location":"manual/7.-Lid-driven-cavity/#Problem-specification","page":"7. Lid Driven Cavity Flow","title":"Problem specification","text":"","category":"section"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"Take Re=100 for example:","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"Re = 100 # Reynolds number","category":"page"},{"location":"manual/7.-Lid-driven-cavity/#Discretization","page":"7. Lid Driven Cavity Flow","title":"Discretization","text":"","category":"section"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"Note that the rectangle function used for making the cavity shape requires a specified half length. The immersed boundary projection method for internal flow requires the size of the domain to be at least a step size greater at the boundaries (i.e. halflength + Δx).","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"Δt,Δx = setstepsizes(Re,gridRe=1.0)\nhalflength=0.5 # to make rectangle with side length of 1\ndomain_lim=halflength+1.01*Δx; # 1.01 is just an abitrary factor chosen to be greater than 1\nxlim, ylim = (-domain_lim,domain_lim),(-domain_lim,domain_lim)","category":"page"},{"location":"manual/7.-Lid-driven-cavity/#Cavity-Geometry","page":"7. Lid Driven Cavity Flow","title":"Cavity Geometry","text":"","category":"section"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"A square cavity can be created using the Rectangle() function with the half length defined above. The shifted=true argument ensures that points are not placed at the corners, where they have ill-defined normal vectors.","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"body = Rectangle(halflength,halflength,1.5*Δx,shifted=true)\nplot(body,fillrange=nothing)","category":"page"},{"location":"manual/7.-Lid-driven-cavity/#Boundary-Condition-at-the-moving-wall","page":"7. Lid Driven Cavity Flow","title":"Boundary Condition at the moving wall","text":"","category":"section"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"Assign velocity to the top boundary. The LidDrivenCavity() function can be used to specify the velocity value at the top wall. Note : Non-dimensional velocity = 1","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"m = ViscousFlow.LidDrivenCavity(1.0)","category":"page"},{"location":"manual/7.-Lid-driven-cavity/#Construct-the-system-structure","page":"7. Lid Driven Cavity Flow","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"The last two input flow_side and static_points must specified so the default setting in the  NavierStokes() function can be overwritten.","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"static_points is set to true because the cavity wall points are not actually moving.","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt,body,m,flow_side = InternalFlow,static_points = true)","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"Initialize","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"u0 = newstate(sys)","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"Set up integrator","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"tspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/7.-Lid-driven-cavity/#Solve","page":"7. Lid Driven Cavity Flow","title":"Solve","text":"","category":"section"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"step!(integrator,10)","category":"page"},{"location":"manual/7.-Lid-driven-cavity/#Examine","page":"7. Lid Driven Cavity Flow","title":"Examine","text":"","category":"section"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"Plot the vorticity and streamlines","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"plot(\nplot(vorticity(integrator),sys,title=\"Vorticity\",clim=(-10,10),color=:turbo,linewidth=1.5,ylim=ylim,levels=-6:0.5:5),\nplot(streamfunction(integrator),sys,title=\"Streamfunction\",color=:black,levels=vcat(0.009:0.01:0.11,0.1145,0.11468,0.11477),ylim=ylim)\n   )","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"Make a movie:","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"sol = integrator.sol;\n@gif for (u,t) in zip(sol.u,sol.t)\n    plot(vorticity(u,sys,t),sys,clim=(-10,10),levels=range(-10,10,length=30),color=:turbo)\nend every 5","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"","category":"page"},{"location":"manual/7.-Lid-driven-cavity/","page":"7. Lid Driven Cavity Flow","title":"7. Lid Driven Cavity Flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"EditURL = \"<unknown>/literate/3.-Applying-pulse-forcing-to-a-flow.jl\"","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/#.-Applying-pulse-forcing-to-a-flow","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"","category":"section"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"Here, we will show how to apply a transient force (a 'pulse') to a flow.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"using ViscousFlow","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"using Plots","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"For this case, we first seek to introduce a pulse to an otherwise quiescent fluid, with no boundaries. The pulse shape will be a smooth dipole, directed upward.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"We will start with the usual steps: specify the problem parameters and the discretization.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"Re = 200\nxlim, ylim = (-2,2), (-2,4)\nΔx,Δt = setstepsizes(Re,gridRe=4)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/#Construct-the-pulse","page":"3. Applying pulse forcing to a flow","title":"Construct the pulse","text":"","category":"section"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"Now create the pulse. For the spatial shape of this pulse, we make use of a Gaussian field, differentiated once in the x direction. We will center it at (0,0), and give it a strength of 10.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"σx = 0.5\nσy = 0.1\ngauss = SpatialGaussian(σx,σy,0,0,10,deriv=1);\nnothing #hide","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"Now we now 'shape' the pulse in time, also with a Gaussian. We center it at t = 0.1 with a half-width in time equal to 0.1.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"t0 = 0.1\nσt = 0.1\npparams = PulseParams(gauss,t0,σt);\nnothing #hide","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/#Construct-the-system-structure","page":"3. Applying pulse forcing to a flow","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"We supply these pulse characteristics with the keyword argument pulses as we set up the usual system structure:","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt,pulses=pparams)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"The remaining steps go just as they did for the previous examples. We will simulate the pulse for 5 time units and make an animation of the results:","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"u0 = newstate(sys)\ntspan = (0.0,10.0) # longer than we need, but just being safe\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"step!(integrator,5.0)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/#Examine","page":"3. Applying pulse forcing to a flow","title":"Examine","text":"","category":"section"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"sol = integrator.sol\n@gif for t in sol.t\n    plot(vorticity(sol,sys,t),sys)\nend every 5","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"plot(streamfunction(integrator),sys,title=\"Streamfunction at t = $(round(integrator.t,digits=2))\")","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"We can also supply more than one pulse. Let's give 3, each separated by 1 time unit.","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"pparams = [PulseParams(gauss,0.1,0.1), PulseParams(gauss,1.1,0.1), PulseParams(gauss,2.1,0.1)];\nnothing #hide","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt,pulses=pparams)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"u0 = newstate(sys)\ntspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"step!(integrator,4.0)","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/#Examine-2","page":"3. Applying pulse forcing to a flow","title":"Examine","text":"","category":"section"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"sol = integrator.sol\n@gif for t in sol.t\n    plot(vorticity(sol,sys,t),sys)\nend every 5","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"","category":"page"},{"location":"manual/3.-Applying-pulse-forcing-to-a-flow/","page":"3. Applying pulse forcing to a flow","title":"3. Applying pulse forcing to a flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"EditURL = \"<unknown>/literate/4.-Multiple-stationary-bodies.jl\"","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#.-Multiple-stationary-bodies","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"Adding multiple bodies to a problem is easy, using the concepts of a BodyList and RigidTransformList.","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"using ViscousFlow","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"using Plots","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"In this example, we will set up a problem with three cylinders arranged in a formation in a free stream.","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"Re = 200 # Reynolds number\nU = 1.0 # Free stream velocity\nU∞ = (U,0.0);\nnothing #hide","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"Set up the domain, grid spacing, and time step size","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"xlim = (-2.0,4.0)\nylim = (-2.0,2.0)\nΔx, Δt = setstepsizes(Re,gridRe=4)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Set-up-bodies","page":"4. Multiple stationary bodies","title":"Set up bodies","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"We start by initializing a BodyList and an associated RigidTransformList. Each member of the RigidTransformList will be used to place the respective body in the correct position and orientation.","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"bl = BodyList()\ntl = RigidTransformList()","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"Place the first body at (-1,0)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"push!(bl,Circle(0.5,1.5Δx))\npush!(tl,RigidTransform((-1.,0.),0.));\nnothing #hide","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"Place the second body at (1,-1)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"push!(bl,Circle(0.5,1.5Δx))\npush!(tl,RigidTransform((1.,-1.),0.));\nnothing #hide","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"and place the third body at (1,1)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"push!(bl,Circle(0.5,1.5Δx))\npush!(tl,RigidTransform((1.,1.),0.))","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"Perform the actual transformation. Note that this operation works in-place:","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"tl(bl)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Plot-the-initial-configuration-of-the-bodies","page":"4. Multiple stationary bodies","title":"Plot the initial configuration of the bodies","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"Just to check they are in the right places","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"plot(bl,xlim=xlim,ylim=ylim)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Construct-the-system-structure","page":"4. Multiple stationary bodies","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"We construct the system with the same syntax as for a single body:","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt,bl,freestream = U∞)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"u0 = newstate(sys)\ntspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Solve","page":"4. Multiple stationary bodies","title":"Solve","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"Here, we run it for only a little while, just to demonstrate:","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"@time step!(integrator,0.5)","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/#Examine","page":"4. Multiple stationary bodies","title":"Examine","text":"","category":"section"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"Let's make an animation","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"sol = integrator.sol;\n@gif for t in sol.t\n    plot(vorticity(sol,sys,t),sys,clim=(-10,10),levels=range(-10,10,length=30), color = :RdBu)\nend every 5","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"Now we will examine the force on each body","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"fx1, fy1 = force(sol,sys,1)\nfx2, fy2 = force(sol,sys,2)\nfx3, fy3 = force(sol,sys,3);\nnothing #hide","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"plt = plot(layout = (2,1), size = (600, 400))\nplot!(plt[1],sol.t,2*fx1,xlim=(0,20),ylim=(0,4),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",label=\"Lead body\",title=\"Drag force\")\nplot!(plt[2],sol.t,2*fy1,xlim=(0,20),ylim=(-2,2),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",label=\"Lead body\",title=\"Side force\")\nplot!(plt[1],sol.t,2*fx2,xlim=(0,20),ylim=(0,4),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",label=\"Trailing body\",title=\"Drag force\")\nplot!(plt[2],sol.t,2*fy2,xlim=(0,20),ylim=(-2,2),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",label=\"Trailing body\",title=\"Side force\")","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"println(\"Mean drag coefficient on lead body = \", GridUtilities.mean(2*fx1))","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"println(\"Mean drag coefficient on trailing body = \", GridUtilities.mean(2*fx2))","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"","category":"page"},{"location":"manual/4.-Multiple-stationary-bodies/","page":"4. Multiple stationary bodies","title":"4. Multiple stationary bodies","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"EditURL = \"<unknown>/literate/5.-Viscous-flow-about-a-moving-body.jl\"","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/#.-Viscous-flow-about-a-moving-body","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"","category":"section"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"In this notebook we will demonstrate the simulation of a moving body. It is straightforward to set up a moving body. The main caveat is that the simulation is slower, because the integrator must update the operators continuously throughout the simulation.","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"We will demonstrate this on an oscillating flat plate.","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"using ViscousFlow","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"using Plots","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/#Problem-specification-and-discretization","page":"5. Viscous flow about a moving body","title":"Problem specification and discretization","text":"","category":"section"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"Re = 200; # Reynolds number\nU = 1.0; # Free stream velocity\nU∞ = (U,0.0);\nnothing #hide","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"xlim = (-1.0,3.0)\nylim = (-1.0,1.0);\nΔx, Δt = setstepsizes(Re,gridRe=4.0)","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/#Set-up-body","page":"5. Viscous flow about a moving body","title":"Set up body","text":"","category":"section"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"Set up the plate and place it at the origin","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"body = Plate(1.0,1.0Δx)\nT = RigidTransform((0.,0.),0.)\nT(body)","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/#Set-the-body-motion","page":"5. Viscous flow about a moving body","title":"Set the body motion","text":"","category":"section"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"Now we specify the body motion. We will use oscillatory pitch-heave kinematics for this:","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"a = 0.25 # location of pitch axis, a = 0.5 is leading edge\nϕp = -π/2  # phase lag of pitch\nϕh = 0.0  # phase lag of heave\nA = 0.25  # amplitude/chord\nfstar = 1/π # fc/U\nα₀ = 0 # mean angle of attack\nΔα = 10π/180 # amplitude of pitching\nU₀ = 0.0 # translational motion (set to zero in place of free stream)\nK = π*fstar # reduced frequency, K = πfc/U\n\noscil1 = RigidBodyTools.PitchHeave(U₀,a,K,ϕp,α₀,Δα,A,ϕh)\nmotion = RigidBodyMotion(oscil1)","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"We can inspect the kinematics in this motion by plotting them:","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"plot(motion)","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/#Construct-the-system-structure","page":"5. Viscous flow about a moving body","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"Here, we supply the motion as an another argument.","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt,body,motion,freestream = U∞)","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"u0 = newstate(sys)\ntspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/#Solve","page":"5. Viscous flow about a moving body","title":"Solve","text":"","category":"section"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"This takes longer than it does for stationary bodies. Here, we only run it for a little while just to demonstrate it.","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"step!(integrator,0.1)","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/#Examine-the-solution","page":"5. Viscous flow about a moving body","title":"Examine the solution","text":"","category":"section"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"plot(vorticity(integrator),sys,clim=(-10,10),levels=range(-10,10,length=30),color = :RdBu)","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"and the forces","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"sol = integrator.sol\nfx, fy = force(sol,sys,1);\nnothing #hide","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"plot(\nplot(sol.t,2*fx,xlim=(0,Inf),ylim=(-3,3),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",legend=:false),\nplot(sol.t,2*fy,xlim=(0,Inf),ylim=(-6,6),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",legend=:false),\n    size=(800,350)\n)","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"","category":"page"},{"location":"manual/5.-Viscous-flow-about-a-moving-body/","page":"5. Viscous flow about a moving body","title":"5. Viscous flow about a moving body","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"EditURL = \"<unknown>/literate/6.-Variable-free-stream.jl\"","category":"page"},{"location":"manual/6.-Variable-free-stream/#.-Variable-free-stream","page":"6. Variable free stream","title":"6. Variable free stream","text":"","category":"section"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"In this notebook we will simulate the flow with a time-varying free stream past a stationary body. To demonstrate this, we will solve for oscillatory flow past a rectangular object, in which the x component of the free stream is","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"U_infty(t) = A sin(Omega t)","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"using ViscousFlow","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"using Plots","category":"page"},{"location":"manual/6.-Variable-free-stream/#Problem-specification","page":"6. Variable free stream","title":"Problem specification","text":"","category":"section"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"We will set the Reynolds number to 200","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Re = 200 # Reynolds number","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"In order to set the time-varying free stream, we will use the OscillationX function, which generates a set of oscillatory kinematics. Type ?OscillationX to learn more.","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Since we are using this function to specify the velocity (the first derivative of the position), then we set","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Ux = 0.0\nΩ  = 1.0\nAx = 1.0\nfs = OscillationX(Ux,Ω,Ax,π/2)","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"As with body motion, it is useful to verify that this provides the expected behavior by plotting it:","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"plot(fs)","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Now let us carry on with the other usual steps:","category":"page"},{"location":"manual/6.-Variable-free-stream/#Discretize","page":"6. Variable free stream","title":"Discretize","text":"","category":"section"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"xlim = (-2.0,2.0)\nylim = (-1.5,1.5)\n\nΔx, Δt = setstepsizes(Re,gridRe=3.0)","category":"page"},{"location":"manual/6.-Variable-free-stream/#Set-up-bodies","page":"6. Variable free stream","title":"Set up bodies","text":"","category":"section"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Here, we will set up a rectangle in the center of the domain","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"body = Rectangle(0.25,0.5,1.5Δx)\nT = RigidTransform((0.0,0.0),0.0)\nT(body)","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"plot(body,xlim=xlim,ylim=ylim)","category":"page"},{"location":"manual/6.-Variable-free-stream/#Construct-the-system-structure","page":"6. Variable free stream","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"This step is like the previous notebook, but now we also provide the body and the freestream:","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt,body,freestream = fs)","category":"page"},{"location":"manual/6.-Variable-free-stream/#Initialize","page":"6. Variable free stream","title":"Initialize","text":"","category":"section"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Now, we initialize with zero vorticity","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"u0 = newstate(sys)","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"and create the integrator","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"tspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/6.-Variable-free-stream/#Solve","page":"6. Variable free stream","title":"Solve","text":"","category":"section"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Now we are ready to solve the problem. Let's advance the solution to t = 1.","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"@time step!(integrator,1.0)\nsol = integrator.sol;\nnothing #hide","category":"page"},{"location":"manual/6.-Variable-free-stream/#Examine","page":"6. Variable free stream","title":"Examine","text":"","category":"section"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Let's look at the flow field at the end of this interval","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"plot(\nplot(vorticity(integrator),sys,title=\"Vorticity\",clim=(-10,10),levels=range(-10,10,length=30), color = :RdBu,ylim=ylim),\nplot(streamfunction(integrator),sys,title=\"Streamlines\",ylim=ylim,color = :Black),\n    size=(700,300)\n    )","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Now let's make a movie","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"@gif for t in sol.t\n    #plot(streamfunction(u,sys,t),sys, color = :Black)\n    plot(vorticity(sol,sys,t),sys,clim=(-10,10),levels=range(-10,10,length=30), color = :RdBu)\nend every 10","category":"page"},{"location":"manual/6.-Variable-free-stream/#Compute-the-force-history","page":"6. Variable free stream","title":"Compute the force history","text":"","category":"section"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Just as we did for the stationary body in a constant free stream","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"fx, fy = force(sol,sys,1);\nnothing #hide","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"Plot them","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"plot(\nplot(sol.t,2*fx,xlim=(0,Inf),ylim=(-6,6),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",legend=:false),\nplot(sol.t,2*fy,xlim=(0,Inf),ylim=(-6,6),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",legend=:false),\n    size=(800,350)\n)","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"The mean drag and lift coefficients are","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"meanCD = GridUtilities.mean(2*fx)","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"meanCL = GridUtilities.mean(2*fy)","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"","category":"page"},{"location":"manual/6.-Variable-free-stream/","page":"6. Variable free stream","title":"6. Variable free stream","text":"This page was generated using Literate.jl.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"EditURL = \"<unknown>/literate/1.-Basic-viscous-flow.jl\"","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#.-Basic-viscous-flow","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"In this example, we will simulate various examples of a basic unbounded viscous flow–-a flow without boundaries. Our initial condition will be a distribution of vorticity.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"using Plots","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"using ViscousFlow","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"using Plots","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#The-basic-steps","page":"1. Basic viscous flow","title":"The basic steps","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"To carry out any simulation in ViscousFlow, we need to carry out a few basic steps:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Specify the problem: Set the Reynolds number and free stream\nDiscretize: Set up a solution domain, grid cell size, time step size\nConstruct the system structure: Create the operators that will be used to perform the simulation\nInitialize: Set the initial flow field and initialize the integrator\nSolve: Solve the flow field\nExamine: Examine the results","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"We will go through all of these here. For the examples we will carry out in this notebook, the first three steps need only be carried out once.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Problem-specification","page":"1. Basic viscous flow","title":"Problem specification","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"We will set the Reynolds number to be 200 and no free stream","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Re = 200","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Discretize","page":"1. Basic viscous flow","title":"Discretize","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"We will set up a domain from x = -2 to x = 2, and y = -2 to y = 2. The Reynolds number helps us determine the grid spacing Δx and time step size Δt. To set these, we set a target grid Reynolds number, gridRe. We will set this to 4 here; if we ignore it, it defaults to 2. Note that this choice is a compromise","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"smaller grid Reynolds number means smaller grid spacing, and slower simulations\nlarger grid Reynolds number means less accurate results","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"xlim = (-2.0,2.0)\nylim = (-2.0,2.0)\nΔx, Δt = setstepsizes(Re,gridRe=4)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Construct-the-system-structure","page":"1. Basic viscous flow","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"This part is easy - you just supply the parameters you have just set up. It returns a structure with all of the necessary mathematical operators:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Now, we will solve a few different problems","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#A-basic-example:-the-Lamb-Oseen-vortex","page":"1. Basic viscous flow","title":"A basic example: the Lamb-Oseen vortex","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"This example starts with a single vortex with a Gaussian distribution of vorticity. To generate this, will use the SpatialGaussian function: The command below creates a Gaussian with radius σ at (0,0) with strength 1.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"σ = 0.2\nx0 = 0.0\ny0 = 0.0\nA = 1\ngauss = SpatialGaussian(σ,x0,y0,A)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Initialize","page":"1. Basic viscous flow","title":"Initialize","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Now, we create an instance of this vorticity distribution on the grid by calling newstate with this vortex.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"u0 = newstate(gauss,sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"We use this initial condition to initialize the integrator. The integrator is the structure that holds all of our solution and operator information. With it, we can start the simulation, restart the simulation later, etc. We specify a range of time over which to advance the solution.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Note: This range need only be large enough to contain the whole interval of time we wish to simulate. It does not need to be chosen very precisely.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Note 2: There is no need to restart the problem! We can keep applying the step! function below as long we need.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"tspan = (0.0,10.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Solve","page":"1. Basic viscous flow","title":"Solve","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Now we are ready to solve the problem. Let's advance the solution to t = 1:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"step!(integrator,1.0)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"We can see now that the solution has been advanced in time:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"integrator","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Examine","page":"1. Basic viscous flow","title":"Examine","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Let's examine the results. It is important to show a few different ways that we can do this. The most straightforward way is to just look at the flow fields at the current state of the integrator. For example, to get the current velocity field, type velocity(integrator). We can do the same for vorticity, streamfunction (the streamlines), scalarpotential, convective_derivative, and pressure.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"We will look at some of these at the current state:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"plot(\n plot(vorticity(integrator),sys,title=\"Vorticity\"),\n plot(streamfunction(integrator),sys,title=\"Streamlines\"),\n plot(pressure(integrator),sys,title=\"Pressure\"),\n plot(velocity(integrator),sys))","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"For this problem, we can compare with the exact solution. The exact solution is also a Gaussian, but with a radius sqrtsigma^2+4tRe","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"oseen_exact(t) = SpatialGaussian(sqrt(σ^2+4*t/Re),x0,y0,A)\nexactsol(t) = newstate(oseen_exact(t),sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"plot(vorticity(integrator)[:,104],label=\"Numerical\")\nplot!(vorticity(exactsol(integrator.t),sys,integrator.t)[:,104],label=\"Exact\")\nplot!(title=string(\"Vorticity at t = \",round(integrator.t,digits=2)))","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Second-example:-co-rotating-vortices","page":"1. Basic viscous flow","title":"Second example: co-rotating vortices","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"The previous example is not very exciting, because the convection of the flow is simply circular. The next example is more interesting, because we will start with two vortices that influence each other's motion:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"σ = 0.1\nx01, y01 = 0.5, 0.0\nx02, y02 = -0.5, 0.0\nA = 1\ntwogauss = SpatialGaussian(σ,x01,y01,A) + SpatialGaussian(σ,x02,y02,A)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Initialize-2","page":"1. Basic viscous flow","title":"Initialize","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Now, we create an instance of this vorticity distribution on the grid.","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"u0 = newstate(twogauss,sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"plot(vorticity(u0,sys,0.0),sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"tspan = (0.0,8.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Solve-2","page":"1. Basic viscous flow","title":"Solve","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Now we are ready to solve the problem. Let's advance the solution to t = 8:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"step!(integrator,8.0)","category":"page"},{"location":"manual/1.-Basic-viscous-flow/#Examine-2","page":"1. Basic viscous flow","title":"Examine","text":"","category":"section"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"In this case, it is best to view the results as an animation. In the previous example, we just looked at the final state of the integrator. Here, to animate, we will make use of the solution history that is held by the integrator, integrator.sol. Let's create an alias for this to shorten our commands:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"sol = integrator.sol;\nnothing #hide","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Now we will animate the solution, plotting the vorticity every 5 steps","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"@gif for t in sol.t\n    plot(vorticity(sol,sys,t),sys)\nend every 5","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"The vortices orbit each other and then eventually merge together. If we wish to make a nice figure, we can arrange snapshots on a grid:","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"plt = plot(layout = (2,4), size = (800, 400), legend=:false)\nframejump = 100\nnframes = 8\nfor (i, frame) in enumerate(1:framejump:(nframes-1)*framejump+1)\n    plot!(plt[i],vorticity(sol,sys,sol.t[frame]),sys,levels=range(0.1,5,length=31))\nend\nsavefig(plt,\"CoRotating.pdf\")\nplt","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Try other examples!","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"Make one or both of the vortices into elliptical shapes\nMake one stronger than the other\nAdd other vortices into the initial distribution","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"","category":"page"},{"location":"manual/1.-Basic-viscous-flow/","page":"1. Basic viscous flow","title":"1. Basic viscous flow","text":"This page was generated using Literate.jl.","category":"page"},{"location":"#ViscousFlow.jl","page":"Home","title":"ViscousFlow.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"a framework for simulating viscous incompressible flows","category":"page"},{"location":"","page":"Home","title":"Home","text":"The objective of this package is to allow easy setup and fast simulation of incompressible flows, particularly those past bodies in motion. The package provides tools for","category":"page"},{"location":"","page":"Home","title":"Home","text":"constructing grids and body shapes,\nspecifying the relevant parameters and setting their values,\nsolving the problem, and finally,\nvisualizing and analyzing the results.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The underlying grids are uniform and Cartesian, making use of the CartesianGrids package. This package allows the use of the lattice Green's function (LGF) for inverting the Poisson equation; the diffusion operators are solved with the integrating factor (Liska and Colonius [2]). Many of the core aspects of the fluid-body interaction are based on the Method of Immersed Layers [1], ImmersedLayers, which is an extension of the immersed boundary projection method [3]. The solver is implemented with the ConstrainedSystems package. Tools for creating bodies and their motions are based on the RigidBodyTools package.","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package works on Julia 1.4 and above and is registered in the general Julia registry. To install from the REPL, type e.g.,","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add ViscousFlow","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then, in any version, type","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using ViscousFlow","category":"page"},{"location":"","page":"Home","title":"Home","text":"The plots in this documentation are generated using Plots.jl. You might want to install that, too, to follow the examples.","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"[1]: Eldredge, J. D. (2021) \"A method of immersed layers on Cartesian grids, with application to incompressible flows,\" arXiv:2103.04521.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[2]: Liska, S. and Colonius, T. (2017) \"A fast immersed boundary method for external incompressible viscous flows using lattice Green's functions,\" J. Comput. Phys., 331, 257–279.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[3]: Taira, K. and Colonius, T. (2007) \"The immersed boundary method: a projection approach,\" J. Comput. Phys., 225, 2118–2137.","category":"page"},{"location":"","page":"Home","title":"Home","text":"[4]: Wang, C. and Eldredge, J. D. (2015) \"Strongly coupled dynamics of fluids and rigid-body systems with the immersed boundary projection method,\" J. Comput. Phys., 295, 87–113. (DOI).","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"EditURL = \"<unknown>/literate/2.-Basic-flow-with-a-stationary-body.jl\"","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#.-Basic-flow-with-a-stationary-body","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"In this notebook we will simulate the flow past a stationary body.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"using ViscousFlow","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"using Plots","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#The-basic-steps","page":"2. Basic flow with a stationary body","title":"The basic steps","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"From the previous notebook, we add one additional step:","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"Specify the problem: Set the Reynolds number and free stream\nDiscretize: Set up a solution domain, grid cell size, time step size\nSet up bodies: Create the body or bodies and specify their motions, if any\nConstruct the system structure: Create the operators that will be used to perform the simulation\nInitialize: Set the initial flow field and initialize the integrator\nSolve: Solve the flow field\nExamine: Examine the results","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"We will go through all of these here. For the examples we will carry out in this notebook, the first three steps need only be carried out once.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Problem-specification","page":"2. Basic flow with a stationary body","title":"Problem specification","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"Set the Reynolds number and free stream","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"Re = 200 # Reynolds number\nU = 1.0 # Free stream velocity\nU∞ = (U,0.0);\nnothing #hide","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Discretize","page":"2. Basic flow with a stationary body","title":"Discretize","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"We set the grid Re to 4.0 here to get a quicker solution, though it is generally better to make this smaller (it defaults to 2.0).","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"xlim = (-1.0,3.0)\nylim = (-1.5,1.5)\nΔx, Δt = setstepsizes(Re,gridRe=4.0)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Set-up-bodies","page":"2. Basic flow with a stationary body","title":"Set up bodies","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"Here, we will set up a rectangle of half-height 0.5 and half-width 0.25 at 45 degrees angle of attack","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"body = Rectangle(0.5,0.25,1.5Δx)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"We place the body at a desired location and orientation with the RigidTransform function. This function creates an operator T that acts in-place on the body: after the operation is applied, body is transformed to the correct location/orientation.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"cent = (0.0,0.0) # center of body\nα = 45π/180 # angle\nT = RigidTransform(cent,α)\nT(body) # transform the body to the current configuration","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"Let's plot it just to make sure","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"plot(body,xlim=xlim,ylim=ylim)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Construct-the-system-structure","page":"2. Basic flow with a stationary body","title":"Construct the system structure","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"This step is like the previous notebook, but now we also provide the body and the freestream:","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt,body,freestream = U∞)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Initialize","page":"2. Basic flow with a stationary body","title":"Initialize","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"Now, we initialize with zero vorticity. Note that we do this by calling newstate with no argument except for sys itself.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"u0 = newstate(sys)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"and now create the integrator, with a long enough time span to hold the whole solution history:","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"tspan = (0.0,20.0)\nintegrator = init(u0,tspan,sys)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Solve","page":"2. Basic flow with a stationary body","title":"Solve","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"Now we are ready to solve the problem. Let's advance the solution to t = 1.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"@time step!(integrator,1.0)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Examine","page":"2. Basic flow with a stationary body","title":"Examine","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"Let's look at the flow field at the end of this interval","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"plot(\nplot(vorticity(integrator),sys,title=\"Vorticity\",clim=(-10,10),levels=range(-10,10,length=30), color = :RdBu,ylim=ylim),\nplot(streamfunction(integrator),sys,title=\"Streamlines\",ylim=ylim,color = :Black),\n    size=(700,300)\n    )","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"Now let's make a movie, like we did last time.","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"sol = integrator.sol;\n@gif for t in sol.t\n    plot(vorticity(sol,sys,t),sys,clim=(-10,10),levels=range(-10,10,length=30), color = :RdBu)\nend every 5","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/#Compute-the-force-history","page":"2. Basic flow with a stationary body","title":"Compute the force history","text":"","category":"section"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"To do this, we supply the solution history sol, the system sys, and the index of the body (1).","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"fx, fy = force(sol,sys,1);\nnothing #hide","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"Plot the histories. Note that we are actually plotting the drag and lift coefficient histories here: $ CD = \\dfrac{Fx}{\\frac{1}{2}\\rho U\\infty^2 L}, \\quad CL = \\dfrac{Fy}{\\frac{1}{2}\\rho U\\infty^2 L} $ Since the quantities in this simulation are already scaled by rho, U_infty, and L (because rho has been scaled out of the equations, and the free stream speed is set to 1 and the height of the shape to 1), then we obtain these coefficients by simply dividing by 1/2, or equivalently, by multiplying by 2:","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"plot(\nplot(sol.t,2*fx,xlim=(0,Inf),ylim=(0,6),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",legend=:false),\nplot(sol.t,2*fy,xlim=(0,Inf),ylim=(-6,6),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",legend=:false),\n    size=(800,350)\n)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"The mean drag and lift coefficients are","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"meanCD = GridUtilities.mean(2*fx)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"meanCL = GridUtilities.mean(2*fy)","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"","category":"page"},{"location":"manual/2.-Basic-flow-with-a-stationary-body/","page":"2. Basic flow with a stationary body","title":"2. Basic flow with a stationary body","text":"This page was generated using Literate.jl.","category":"page"}]
}
