var documenterSearchIndex = {"docs":
[{"location":"manual/saddlesystems/#Saddle-point-systems-1","page":"Saddle point systems","title":"Saddle point systems","text":"","category":"section"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"DocTestSetup = quote\nusing ViscousFlow\nend","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"defddt1fracmathrmd1mathrmdt\n\nrenewcommandvecboldsymbol\nnewcommanduvec1vechat1\nnewcommandutangentuvectau\nnewcommandunormaluvecn\n\nrenewcommanddmathrmd","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"using ViscousFlow\nusing Plots","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Saddle systems comprise an important part of solving mechanics problems with constraints. In such problems, there is an underlying system to solve, and the addition of constraints requires that the system is subjected to additional forces (constraint forces, or Lagrange multipliers) that enforce these constraints in the system. Examples of such constrained systems are the divergence-free velocity constraint in incompressible flow (for which pressure is the associated Lagrange multiplier field), the no-slip and/or no-flow-through condition in general fluid systems adjacent to impenetrable bodies, and joint constraints in rigid-body mechanics.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"A general saddle-point system has the form","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"left beginarraycc A  B_1^T  B_2  Cendarrayright left(beginarraycuf endarrayright) = left(beginarraycr_1r_2 endarrayright)","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"We are primarily interested in cases when the operator A is symmetric and positive semi-definite, which is fairly typical. It is also fairly common for B_1 = B_2, so that the whole system is symmetric.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"ViscousFlow allows us to solve such systems for u and f in a fairly easy way. We need only to provide rules for how to evaluate the actions of the various operators in the system. Let us use an example to show how this can be done.","category":"page"},{"location":"manual/saddlesystems/#Translating-cylinder-in-potential-flow-1","page":"Saddle point systems","title":"Translating cylinder in potential flow","text":"","category":"section"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"In irrotational, incompressible flow, the streamfunction psi satisfies Laplace's equation,","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"nabla^2 psi = 0","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"On the surface of an impenetrable body, the streamfunction must obey the constraint","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"psi = psi_b","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"where psi_b is the streamfunction associated with the body's motion. Let us suppose the body is moving vertically with velocity 1. Then psi_b = -x for all points inside or on the surface of the body. Thus, the streamfunction field outside this body is governed by Laplace's equation subject to the constraint.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Let us solve this problem on a staggered grid, using the tools discussed in CartesianGrids, including the regularization and interpolation methods to immerse the body shape on the grid. Then our saddle-point system has the form","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"left beginarraycc L  R  E  0endarrayright left(beginarraycpsif endarrayright) = left(beginarrayc0psi_b endarrayright)","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"where L is the discrete Laplacian, R is the regularization operator, and E is the interpolation operator.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Physically, f isn't really a force here, but rather, represents the strengths of distributed singularities on the surface. In fact, this strength represents the jump in normal derivative of psi across the surface. Since this normal derivative is equivalent to the tangential velocity, f is the strength of the bound vortex sheet on the surface. This will be useful to know when we check the value of f obtained in our solution.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"First, let us set up the body, centered at (11) and of radius 12. We will also initialize a data structure for the force:","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"using ViscousFlow\nusing Plots\npyplot()","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"n = 128; θ = range(0,stop=2π,length=n+1);\nxb = 1.0 .+ 0.5*cos.(θ[1:n]); yb = 1.0 .+ 0.5*sin.(θ[1:n]);\nX = VectorData(xb,yb);\nψb = ScalarData(X);","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Now let's set up a grid of size 102times 102 (including the usual layer of ghost cells) and physical dimensions 2times 2.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"nx = 102; ny = 102; Lx = 2.0; dx = Lx/(nx-2);\nw = Nodes(Dual,(nx,ny));","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"We need to set up the operators now. First, the Laplacian:","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"L = plan_laplacian(size(w),with_inverse=true)","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Note that we have made sure that this operator has an inverse. It is important that this operator, which represents the A matrix in our saddle system, comes with an associated backslash \\\\ operation to carry out the inverse.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Now we need to set up the regularization R and interpolation E operators.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"regop = Regularize(X,dx;issymmetric=true)\nRmat, Emat = RegularizationMatrix(regop,ψb,w);","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Now we are ready to set up the system. The solution and right-hand side vectors are set up using SaddleVector:","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"rhs = SaddleVector(w,ψb)","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"and the saddle system is then set up with the three operators; the C operator is presumed to be zero when it is not provided.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"A = SaddleSystem(L,Emat,Rmat,rhs)","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Note that all of the operators we have provided are either matrices (like Emat and Rmat) or functions or function-like operators (like L). The SaddleSystem constructor allows either. However, the order is important: we must supply A, B_2, B_1^T, and possibly C, in that order.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Let's solve the system. We need to set the right-hand side. We will set ψb, but this will also change rhs, since that vector is pointing to the same object.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"ψb .= -(xb.-1);","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"The right-hand side of the Laplace equation is zero. The right-hand side of the constraint is the specified streamfunction on the body. Note that we have subtracted the circle center from the x positions on the body. The reason for this will be discussed in a moment.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"We solve the system with the convenient shorthand of the backslash:","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"#sol = A\\rhs\n@time sol = A\\rhs","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Just to point out how fast it can be, we have also timed it. It's pretty fast.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"We can obtain the state vector and the constraint vector from sol using some convenience functions state(sol) and constraint(sol).","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Now, let's plot the solution in physical space. We'll plot the body shape for reference, also.","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"xg, yg = coordinates(w,dx=dx)\nplot(xg,yg,state(sol),xlim=(-Inf,Inf),ylim=(-Inf,Inf))\nplot!(xb,yb,fillcolor=:black,fillrange=0,fillalpha=0.25,linecolor=:black)\nsavefig(\"sfunc.svg\"); nothing # hide","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"(Image: )","category":"page"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"The solution shows the streamlines for a circle in vertical motion, as expected. All of the streamlines inside the circle are vertical.","category":"page"},{"location":"manual/saddlesystems/#Methods-1","page":"Saddle point systems","title":"Methods","text":"","category":"section"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Modules = [SaddlePointSystems]\nOrder   = [:type, :function]","category":"page"},{"location":"manual/saddlesystems/#ViscousFlow.SaddlePointSystems.SaddleSystem-Union{Tuple{TS}, Tuple{T}, Tuple{LinearMaps.LinearMap{T},LinearMaps.LinearMap{T},LinearMaps.LinearMap{T},LinearMaps.LinearMap{T},LinearMaps.LinearMap{T},LinearMaps.LinearMap{T},Any,Any}} where TS<:SchurSolverType where T","page":"Saddle point systems","title":"ViscousFlow.SaddlePointSystems.SaddleSystem","text":"SaddleSystem\n\nConstruct a saddle-point system operator from the constituent operator blocks. The resulting object can be used with * and \\ to multiply and solve. The saddle-point problem has the form\n\nbeginbmatrixA  B_1^T  B_2  C endbmatrix beginpmatrix u  f endpmatrix = beginpmatrix r_1  r_2 endpmatrix\n\nConstructors\n\nSaddleSystem(A::AbstractMatrix,B₂::AbstractMatrix,B₁ᵀ::AbstractMatrix,C::AbstractMatrix[,eltype=Float64]). Blocks are given as matrices. Must have consistent sizes to stack appropriately. If this is called with SaddleSystem(A,B₂,B₁ᵀ), it sets C to zero automatically.\n\nSaddleSystem(A,B₂,B₁ᵀ,C,u,f[,eltype=Float64]). Operators A, B₂, B₁ᵀ, C are given in various forms, including matrices, functions, and function-like objects. u and f are examples of the data types in the corresponding solution and right-hand side vectors. Guidelines:\n\nThe entries A and B₂ must be able to act upon u (either by multiplication or as a function) and B₁ᵀ and C must be able to act on f (also, either by multiplication or as a function).\nA and B₁ᵀ should return data of type u, and B₂ and C should return data of type f.\nA must be invertible and be outfitted with operators `andldiv!`.\nBoth u and f must be subtypes of AbstractArray: they must be equipped with size and vec functions and with a constructor of the form T(data) where T is the data type of u or f and data is the wrapped data array.\n\nIf called as SaddleSystem(A,B₂,B₁ᵀ,u,f), the C block is omitted and assumed to be zero.\n\nIf called with SaddleSystem(A,u), this is equivalent to calling SaddleSystem(A,nothing,nothing,u,[]), then this reverts to the unconstrained system described by operator A.\n\nThe list of vectors u and f in any of these constructors can be bundled together as a SaddleVector, e.g. SaddleSystem(A,B₂,B₁ᵀ,SaddleVector(u,f)).\n\n\n\n\n\n","category":"method"},{"location":"manual/saddlesystems/#ViscousFlow.SaddlePointSystems.SaddleVector","page":"Saddle point systems","title":"ViscousFlow.SaddlePointSystems.SaddleVector","text":"SaddleVector(u,f)\n\nConstruct a vector of a state part u and constraint part f of a saddle-point vector, to be associated with a SaddleSystem.\n\n\n\n\n\n","category":"type"},{"location":"manual/saddlesystems/#ViscousFlow.SaddlePointSystems.constraint-Tuple{RecursiveArrayTools.ArrayPartition}","page":"Saddle point systems","title":"ViscousFlow.SaddlePointSystems.constraint","text":"constraint(x::SaddleVector)\n\nProvide the constraint part of the given saddle vector x\n\n\n\n\n\n","category":"method"},{"location":"manual/saddlesystems/#ViscousFlow.SaddlePointSystems.state-Tuple{RecursiveArrayTools.ArrayPartition}","page":"Saddle point systems","title":"ViscousFlow.SaddlePointSystems.state","text":"state(x::SaddleVector)\n\nProvide the state part of the given saddle vector x\n\n\n\n\n\n","category":"method"},{"location":"manual/saddlesystems/#Base.eltype-Union{Tuple{SaddleSystem{T,Ns,Nc,TF,TU,TS} where TS<:SchurSolverType where TU where TF}, Tuple{Nc}, Tuple{Ns}, Tuple{T}} where Nc where Ns where T","page":"Saddle point systems","title":"Base.eltype","text":"Base.eltype(::SaddleSystem)\n\nReport the element type of a SaddleSystem.\n\n\n\n\n\n","category":"method"},{"location":"manual/saddlesystems/#Base.size-Union{Tuple{SaddleSystem{T,Ns,Nc,TF,TU,TS} where TS<:SchurSolverType where TU where TF}, Tuple{Nc}, Tuple{Ns}, Tuple{T}} where Nc where Ns where T","page":"Saddle point systems","title":"Base.size","text":"Base.size(::SaddleSystem)\n\nReport the size of a SaddleSystem.\n\n\n\n\n\n","category":"method"},{"location":"manual/saddlesystems/#Index-1","page":"Saddle point systems","title":"Index","text":"","category":"section"},{"location":"manual/saddlesystems/#","page":"Saddle point systems","title":"Saddle point systems","text":"Pages = [\"saddlesystems.md\"]","category":"page"},{"location":"manual/navierstokes/#Navier-Stokes-systems-1","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"","category":"section"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"CurrentModule = ViscousFlow.Systems\nDocTestSetup = quote\nusing ViscousFlow\nend","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"defddt1fracmathrmd1mathrmdt\n\nrenewcommandvecboldsymbol\nnewcommanduvec1vechat1\nnewcommandutangentuvectau\nnewcommandunormaluvecn\n\nrenewcommanddmathrmd","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"using ViscousFlow\nusing Plots","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Here, we will focus on putting tools together from the previous sections in order to set up and solve the Navier-Stokes system of equations. First, we will solve them in a completely unbounded domain (i.e., no bodies), and then we will solve them in the vicinity of a body.","category":"page"},{"location":"manual/navierstokes/#Navier-Stokes-without-a-body-1","page":"Navier-Stokes systems","title":"Navier-Stokes without a body","text":"","category":"section"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Here, we seek the solve the two-dimensional incompressible Navier-Stokes equations in their discrete vorticity form, in an unbounded domain:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"ddt w + N(vw) = frac1Re L w","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"along with the initial condition","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"w(0) = w_0","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The field w represents the discrete vorticity, which sits at the nodes of the dual cells. The velocity, v, lies on the edges of the primal cells. They are related to each other by v = Cs, where s = -L^-1 w is the discrete streamfunction.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The second term on the left-hand side is the convective term, which we have simply written as N(vw). There are several ways to write this term; here, we will write it by using the discrete divergence,","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"N(vw) = D(vw)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The Systems module has a function that is set up to compute this term; we will discuss it below. The right-hand side contains the viscous term, proportional to 1Re, where Re is the Reynolds number. For this, we will use the integrating factor. For purposes of calculation, it is better to express the problem as","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"ddt w - frac1Re L w = r_1(w)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"where r_1(w) = -D(vw).","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"For demonstration, we will solve a problem consisting initially of two identical circular patches of vorticity.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"using ViscousFlow\nusing Plots\npyplot()","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The first thing we must do is set up a grid. We will make it square, with spacing equal to 0.02 in each cell.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"xlim = (-2,2); ylim = (-2,2);\nΔx = 0.02;","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we will set the Reynolds number, and set the time step size so that it follows the so-called CFL condition (with CFL number set to 0.5). To be careful, we also make sure the time step size does not exceed a threshold in the grid Fourier number (also set to 0.5):","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Re = 200\nΔt = min(0.5*Δx,0.5*Δx^2*Re)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we set up the Navier-Stokes system. This sets the rest of the grid parameters, (number of cells, etc), and creates some some buffer space on the grid.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"sys = NavierStokes(Re,Δx,xlim,ylim,Δt)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"For example, to check how many dual grid cells we have, we can use the size function, which has been extended to such systems:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"size(sys)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Let's set up a set of dual nodes on this grid:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"w₀ = Nodes(Dual,size(sys));","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The physical grid coordinates of these dual nodes can be generated with the coordinates function:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"xg, yg = coordinates(w₀,dx=Systems.cellsize(sys),I0=Systems.origin(sys))","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we are ready to set up the integrator for this problem. To account for the viscous diffusion, we need the integrating factor. There are no body constraints to enforce, so we will use the integrating factor Runge-Kutta method (IFRK). For this, we need to set up plans for the integrating factor and for the right-hand side (r_1). The Systems module has functions that do both for us, using the system data in sys. We just need to change their argument list so that they fit the template for the IFRK scheme:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plan_intfact(t,w) = Systems.plan_intfact(t,w,sys)\nr₁(w,t) = Systems.r₁(w,t,sys)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we can construct the integrator. We will use 3rd-order Runge-Kutta:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"ifrk = IFRK(w₀,sys.Δt,plan_intfact,r₁,rk=TimeMarching.RK31)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Note that we have only passed in w₀ to this scheme to provide the form of data to be used for the state vector in the integrator. It does not matter that the data are still zeros.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Finally we are ready to solve the problem. We set up the initial condition. It is helpful to define a function first that specifies the vorticity distribution in each vortex patch. We will use a Gaussian:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"using LinearAlgebra\ngaussian(x,x0,σ) = exp(-LinearAlgebra.norm(x.-x0)^2/σ^2)/(π*σ^2)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now the initial conditions. We will put one vortex at (-050) and the other at (050). They will each have a strength of 1 and a radius of 02. (Reynolds number is implicitly defined in this problem as Gammanu, where nu is the kinematic viscosity. So there is no point in changing the strength; only the Reynolds number need be varied to explore different mixes of convective and diffusive transport.)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"t = 0.0\nx01 = (-0.5,0); x02 = (0.5,0); σ = 0.2; Γ = 1\nw₀ .= Δx*[Γ*gaussian((x,y),x01,σ) + Γ*gaussian((x,y),x02,σ) for x in xg, y in yg];\nw = deepcopy(w₀);","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Note that we have multiplied the vorticity vector by the grid spacing. This is because the vector w is not actually the vorticity, but rather, a grid vorticity related to velocity through differencing. Let's plot it to see what we are starting with:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plot(xg,yg,w)\nsavefig(\"w0corotate.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"We will integrate the problem for 1 time unit:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"tf = 1\nT = 0:Δt:tf","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now, do it. We will time it to see how long it takes:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"@time for ti in T\n    global t, w = ifrk(t,w)\nend","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"and plot it again:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plot(xg,yg,w)\nsavefig(\"w1corotate.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Let's go further!","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"tf = 6\nT = 0:Δt:tf\n@time for ti in T\n    global t, w = ifrk(t,w)\nend","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plot(xg,yg,w)\nsavefig(\"w2corotate.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/#Navier-Stokes-with-a-body-1","page":"Navier-Stokes systems","title":"Navier-Stokes with a body","text":"","category":"section"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now let's solve for flow past a body. We will solve for the flow past a circular cylinder, a canonical problem in fluid dynamics.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"using ViscousFlow\nusing Plots\npyplot()","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"We will start by constructing the body points,","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"n = 100;\nbody = Bodies.Circle(0.5,n)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"We will leave it at the origin. However, to show how we can place it in different orientations, we will construct a rigid-body transformation for demonstration:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"cent = (0.0,0.0)\nα = 0.0\nT! = RigidTransform(cent,α)\nT!(body)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we construct the grid. This time, we will make the grid longer, so that it can resolve part of the wake. (The cylinder will be placed at)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"xlim = (-1,3); ylim = (-1,1);\nΔx = 0.02;","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Let's plot this to see its placement in the domain","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plot(body,xlim=xlim,ylim=ylim)\nsavefig(\"cyl0.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we will set the Reynolds number and free stream velocity. Since the problem is scaled by the free stream velocity, we need only set the speed to 1.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Re = 200\nU = 1.0;\nU∞ = (U,0.0)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Set the time step size with the usual CFL condition:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Δt = min(0.5*Δx,0.5*Δx^2*Re)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now set up the body point coordinates in a vector data structure. If we had more than one body, we would assemble all of the bodies' points into this same vector.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"X = VectorData(body.x,body.y);","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Create the Navier-Stokes system:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"sys = Systems.NavierStokes(Re,Δx,xlim,ylim,Δt,U∞ = U∞, X̃ = X, isstore = true)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now set up the basic data structures for use in the problem.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"w₀ = Nodes(Dual,size(sys));\nf = VectorData(X);","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The cylinder flow remains symmetric unless it is explicitly perturbed. We will do this by applying a point perturbation directly in the vorticity, over a short interval centered at t = 4.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"xf = (1.5,0.0);\nFf = 10.0;\nt0 = 4.0; σ = 1.0;\nwforce = PointForce(w₀,xf,Ff,t0,σ,sys)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now we can set up the integrator. For this, we use IFHERK, since we need both the integrating factor and the constraint applications. We use ready-made functions for each of these. For the right-hand side of the Navier-Stokes equations r₁, we add the point force at time t.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plan_intfact(t,u) = Systems.plan_intfact(t,u,sys)\nplan_constraints(u,t) = TimeMarching.plan_constraints(u,t,sys)\nr₁(u,t) = TimeMarching.r₁(u,t,sys) + wforce(t)\nr₂(u,t) = TimeMarching.r₂(u,t,sys)\n@time ifherk = IFHERK(w₀,f,sys.Δt,plan_intfact,plan_constraints,(r₁,r₂),\n        rk=TimeMarching.RK31)","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now set the initial conditions, and initialize some vectors for storing results","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"t = 0.0\nu = deepcopy(w₀);\nfx = Float64[];\nfy = Float64[];\nthist = Float64[];","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Let's first integrate just one time unit forward to see the results. We will collect the force data into the fx and fy arrays.","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"tf = 1.0;\nT = Δt:Δt:tf;\n@time for ti in T\n    global t, u, f = ifherk(t,u)\n\n    push!(thist,t)\n    push!(fx,sum(f.u)*Δx^2)\n    push!(fy,sum(f.v)*Δx^2)\nend","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Plot the solution:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"xg, yg = coordinates(w₀,dx=Δx,I0=Systems.origin(sys))\nplot(xg,yg,u,levels=range(-0.25,stop=0.25,length=30), color = :RdBu,width=1,\n        xlim=(-1+Δx,3-Δx),ylim=(-1+Δx,1-Δx))\nplot!(body)\nsavefig(\"cyl1.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"The solution is still symmetric because we have not yet applied the perturbation. Advance 4 more units:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"tf = 4.0;\nT = Δt:Δt:tf;\n@time for ti in T\n    global t, u, f = ifherk(t,u)\n\n    push!(thist,t)\n    push!(fx,sum(f.u)*Δx^2)\n    push!(fy,sum(f.v)*Δx^2)\nend\nplot(xg,yg,u,levels=range(-0.25,stop=0.25,length=30), color = :RdBu, width=1,\n        xlim=(-1+Δx,3-Δx),ylim=(-1+Δx,1-Δx))\nplot!(body)\nsavefig(\"cyl5.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Now it is losing symmetry after the perturbation has triggered this behavior. Run it several more time units:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"tf = 25.0;\nT = Δt:Δt:tf;\n@time for ti in T\n    global t, u, f = ifherk(t,u)\n\n    push!(thist,t)\n    push!(fx,sum(f.u)*Δx^2)\n    push!(fy,sum(f.v)*Δx^2)\nend\nplot(xg,yg,u,levels=range(-0.25,stop=0.25,length=30), color = :RdBu,width=1,\n        xlim=(-1+Δx,3-Δx),ylim=(-1+Δx,1-Δx))\nplot!(body)\nsavefig(\"cyl30.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"A full wake now after 30 time units! Plot the force, too:","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"plt = plot(layout = (2,1), size = (600, 400))\nplot!(plt[1],thist,2*fy,xlim=(0,30),ylim=(-2,2),xlabel=\"Convective time\",ylabel=\"\\$C_L\\$\",legend=false)\nplot!(plt[2],thist,2*fx,xlim=(0,30),ylim=(0,4),xlabel=\"Convective time\",ylabel=\"\\$C_D\\$\",legend=false)\nplt\nsavefig(\"cylforce.svg\"); nothing # hide","category":"page"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"(Image: )","category":"page"},{"location":"manual/navierstokes/#Methods-1","page":"Navier-Stokes systems","title":"Methods","text":"","category":"section"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Modules = [Systems]","category":"page"},{"location":"manual/navierstokes/#ViscousFlow.Systems.History","page":"Navier-Stokes systems","title":"ViscousFlow.Systems.History","text":"History(datatype,[;htype::HistoryType = RegularHistory])\n\nCreate an empty history data vector with entries of type datatype. Alternatively, one can pass an example instance of the type of entry. An optional argument htype specifies the type of history vector. By default, this is RegularHistory, but can be alternatively set to PeriodicHistory. In the latter case, if the history vector has length n, then it will be assumed that the n+1 entry is identical to the 1 entry.\n\nIt is important to note that, in order to use the routines for History types, then the element type datatype must be outfitted with basic operations: +, -, scalar multiplication, and fill!.\n\nAnother constructor is History(h::History), which creates an empty instance of a history of the same type as h.\n\n\n\n\n\n","category":"type"},{"location":"manual/navierstokes/#ViscousFlow.Systems.History-Union{Tuple{Array{T,1}}, Tuple{H}, Tuple{T}} where H<:HistoryType where T","page":"Navier-Stokes systems","title":"ViscousFlow.Systems.History","text":"History(data::Vector[;htype=RegularHistory])\n\nCreate a history data vector and fill it with the vector data. The history type can be alternatively specified as RegularHistory (the default) or PeriodicHistory with the htype optional argument.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#ViscousFlow.Systems.NavierStokes","page":"Navier-Stokes systems","title":"ViscousFlow.Systems.NavierStokes","text":"mutable struct NavierStokes{NX, NY, N, isstatic}\n\nA system type that utilizes a grid of NX x NY dual cells and N Lagrange forcing points to solve the discrete Navier-Stokes equations in vorticity form. The parameter isstatic specifies whether the forcing points remain static in the grid.\n\nFields\n\nRe: Reynolds number\nU∞: Tuple of components of free-stream velocity\nΔx: Size of each side of a grid cell\nI0: Tuple of indices of the primal node corresponding to physical origin\nΔt: Time step\nrk: Runge-Kutta coefficients\nL: Pre-planned discrete Laplacian operator and inverse\nX̃: Lagrange point coordinate data (if present), expressed in inertial coordinates       (if static) or in body-fixed coordinates (if moving)\nHmat: Pre-computed regularization matrix (if present)\nEmat: Pre-computed interpolation matrix (if present)\nVb: Buffer space for vector data on Lagrange points\nFq: Buffer space for primal cell edge data\nWw: Buffer space for dual cell edge data\nQq: More buffer space for dual cell edge data\n_isstore: flag to specify whether to store regularization/interpolation matrices\n\nConstructors:\n\nNavierStokes(Re,Δx,xlimits,ylimits,Δt               [,U∞ = (0.0, 0.0)][,X̃ = VectorData{0}()]               [,isstore=false][,isstatic=true][,isfilter=false]               [,rk=TimeMarching.RK31]               [,ddftype=CartesianGrids.Yang3]) specifies the Reynolds number Re, the grid               spacing Δx, the dimensions of the domain in the tuples xlimits               and ylimits (excluding the ghost cells), and the time step size Δt.               The other arguments are optional. Note that isstore set to true               would store matrix versions of the operators. This makes the method               faster, at the cost of storage. If isfilter is set to true, then               the regularization relies on a filtered version.\n\n\n\n\n\n","category":"type"},{"location":"manual/navierstokes/#ViscousFlow.Systems.StorePlan","page":"Navier-Stokes systems","title":"ViscousFlow.Systems.StorePlan","text":"StorePlan(min_t,max_t,store_Δt,v[;htype=RegularHistory])\n\nCreate a plan for storing history data. The storage of data is specified to start at time unit min_t and to proceed until (and including) max_t, and is stored every store_Δt time units. The list of variables to be stored is specified as a list of variables v. Tuple-type variables are unwrapped into separate storage. The optional argument htype can be used to set the history data to PeriodicHistory or RegularHistory (the default). In the case of PeriodicHistory, the data is assumed to repeat with a period equal to length(history)+1.\n\n\n\n\n\n","category":"type"},{"location":"manual/navierstokes/#ViscousFlow.Systems.WritePlan","page":"Navier-Stokes systems","title":"ViscousFlow.Systems.WritePlan","text":"WritePlan(file,write_Δt,varlist)\n\nCreate a plan for writing data to file. The filename file is specified, to be written to every write_Δt time units. The variable names to be written are specified as a vector of strings in varlist.\n\n\n\n\n\n","category":"type"},{"location":"manual/navierstokes/#ViscousFlow.Systems.initialize_storage-Union{Tuple{StorePlan{H}}, Tuple{H}} where H","page":"Navier-Stokes systems","title":"ViscousFlow.Systems.initialize_storage","text":"initialize_storage(S::StorePlan) -> Vector\n\nInitialize a storage data stack for the storage plan S. The output is an empty vector of History vectors.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#ViscousFlow.Systems.set_first_ghost!-Union{Tuple{T}, Tuple{History{T,RegularHistory},History{T,H} where H<:HistoryType}} where T","page":"Navier-Stokes systems","title":"ViscousFlow.Systems.set_first_ghost!","text":"set_first_ghost!(h::History,h_pre::History)\n\nSet the first ghost value of history h with the last element of history h_pre. This is only valid if h is of type RegularHistory.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#ViscousFlow.Systems.set_last_ghost!-Union{Tuple{T}, Tuple{History{T,RegularHistory},History{T,H} where H<:HistoryType}} where T","page":"Navier-Stokes systems","title":"ViscousFlow.Systems.set_last_ghost!","text":"set_last_ghost!(h::History,h_post::History)\n\nSet the last ghost value of history h with the first element of history h_post. This is only valid if h is of type RegularHistory.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#ViscousFlow.Systems.store_data!-Tuple{Any,Any,StorePlan,Vararg{Any,N} where N}","page":"Navier-Stokes systems","title":"ViscousFlow.Systems.store_data!","text":"store_data!(data,t,S::StorePlan,v)\n\nCheck whether time t is a time for saving for storage as described by plan S, and if so, push the variables specified in v onto the data stack.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#Base.size-Union{Tuple{NY}, Tuple{NX}, Tuple{NavierStokes{NX,NY,N,isstatic} where isstatic where N,Int64}} where NY where NX","page":"Navier-Stokes systems","title":"Base.size","text":"size(sys::NavierStokes,d::Int) -> Int\n\nReturn the number of indices of the grid used by sys along dimension d.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#Base.size-Union{Tuple{NavierStokes{NX,NY,N,isstatic} where isstatic where N}, Tuple{NY}, Tuple{NX}} where NY where NX","page":"Navier-Stokes systems","title":"Base.size","text":"size(sys::NavierStokes) -> Tuple{Int,Int}\n\nReturn a tuple of the number of indices of the grid used by sys\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#CartesianGrids.cellsize-Tuple{NavierStokes}","page":"Navier-Stokes systems","title":"CartesianGrids.cellsize","text":"cellsize(sys::NavierStokes) -> Float64\n\nReturn the grid cell size of system sys\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#CartesianGrids.origin-Tuple{NavierStokes}","page":"Navier-Stokes systems","title":"CartesianGrids.origin","text":"origin(sys::NavierStokes) -> Tuple{Int,Int}\n\nReturn a tuple of the indices of the primal node that corresponds to the physical origin of the coordinate system used by sys. Note that these indices need not lie inside the range of indices occupied by the grid. For example, if the range of physical coordinates occupied by the grid is (1.0,3.0) x (2.0,4.0), then the origin is not inside the grid.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#FileIO.load-Tuple{WritePlan}","page":"Navier-Stokes systems","title":"FileIO.load","text":"load(R::WritePlan[,var::String])\n\nLoad the data stored in the file specified by the WritePlan R. If variable var is specified, outputs the specified variable.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#FileIO.save-Tuple{Any,WritePlan,Vararg{Any,N} where N}","page":"Navier-Stokes systems","title":"FileIO.save","text":"save(t,R::WritePlan,v)\n\nCheck if time t is appropriate for writing to file, according to the WritePlan R, and if so, write the specified variables v (which may be separated by commas) in R to the file in R.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#ViscousFlow.RigidBodyMotions.assign_velocity!-Union{Tuple{N}, Tuple{VectorData{N,T,DT} where DT<:(AbstractArray{T,1} where T) where T,VectorData{N,T,DT} where DT<:(AbstractArray{T,1} where T) where T,BodyList,Array{RigidTransform,1},Array{RigidBodyMotion,1},Real}} where N","page":"Navier-Stokes systems","title":"ViscousFlow.RigidBodyMotions.assign_velocity!","text":"assign_velocity!(V::VectorData,X::VectorData,\n                 xc::Real,yc::Real,α::Real,\n                 mlist::Vector{RigidBodyMotion},t::Real)\n\nAssign the components of rigid body velocity for every body (in inertial coordinate system) at time t in the overall data structure V, using coordinates described by X (also in inertial coordinate system), based on array of supplied motion mlist for each body.\n\n\n\n\n\n","category":"method"},{"location":"manual/navierstokes/#Index-1","page":"Navier-Stokes systems","title":"Index","text":"","category":"section"},{"location":"manual/navierstokes/#","page":"Navier-Stokes systems","title":"Navier-Stokes systems","text":"Pages = [\"navierstokes.md\"]","category":"page"},{"location":"manual/timemarching/#Time-marching-1","page":"Time marching","title":"Time marching","text":"","category":"section"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"DocTestSetup = quote\nusing ViscousFlow\nend","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"defddt1fracmathrmd1mathrmdt\n\nrenewcommandvecboldsymbol\nnewcommanduvec1vechat1\nnewcommandutangentuvectau\nnewcommandunormaluvecn\n\nrenewcommanddmathrmd","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"using ViscousFlow\nusing Plots","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"ViscousFlow is equipped with a few classes of time marching schemes for advancing time-dependent equations.","category":"page"},{"location":"manual/timemarching/#Integrating-factor-systems-1","page":"Time marching","title":"Integrating factor systems","text":"","category":"section"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Integrating factor systems that we encounter in ViscousFlow are of the form","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"ddt u = A u + r_1(ut) quad u(0) = u_0","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"The operator A may be a matrix or a scalar, but is generally independent of time. (The   method of integrating factors can deal with time-dependent A, but we don't encounter   such systems in the ViscousFlow context so we won't discuss them.) For this purpose, we use the IFRK class of solver, which stands for Integrating Factor Runge-Kutta. This method solves   the part associated with A exactly, via the integrating factor, and advances a modified   equation by Runge-Kutta method to account for the remaining part r_1.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"We discussed the construction   of the integrating factor in the context of fields in CartesianGrids. But first, let's   give an example of how we can solve a simpler problem with just a single scalar-valued   u. The example we will solve is","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"ddt u = -alpha u + cos(omega t)quad u(0) = u_0","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"The exact solution is easily obtained:","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"u(t) = u_0 e^-alpha t + frac1alpha^2+omega^2 left alpha(cos(omega t) - e^-alpha t) + omega sin (omega t)right","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Let's solve it numerically, so we can evaluate the accuracy of the solver. We should note that the integrating factor for this system is e^-alpha t.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"For demonstration, we will set alpha = 1, omega = 4, and u_0 = 1.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"using ViscousFlow\nusing Plots\npyplot()","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"α = 1; ω = 4; u₀ = 1.0;","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Here is the exact solution for later comparison","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"uex(t) = u₀*exp(-α*t) + (α*(cos(ω*t)-exp(-α*t))+ω*sin(ω*t))/(α^2+ω^2)","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"The first steps are to define operators that provide the integrating factor and the right-hand side of the equations. For the integrating factor, we extend the definition of plan_intfact from CartesianGrids.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"ViscousFlow.plan_intfact(t::Float64,u::Vector{Float64}) = exp(-α*t);","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Note that we have defined this extended form of plan_intfact to adhere to the standard form, accepting arguments for time t and the state vector u, even though the state vector isn't strictly needed here. The state 'vector' in this problem is actually only a scalar, of course. But the time marching method does not accept scalar-type states currently, so we will make u a 1-element vector to use the ViscousFlow tools.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Now let us define the right-hand side function. This function should also adhere to the standard form, which requires the state vector u and the time t as arguments.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"r₁(u::Vector{Float64},t::Float64) = cos(ω*t);","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"We also need to set the time-step size (001) and the initial condition. For the latter, we set up the state vector as a 1-element vector, as discussed earlier:","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Δt = 0.01;\nu = [u₀];","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"We can now construct the integrator. We supply a form of the state vector (for use as a template   for pre-allocating space for internal storage variables), the time-step size, and the   definitions of the integrating factor and the right-hand side function:","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"ifrk = IFRK(u,Δt,plan_intfact,r₁,rk=TimeMarching.RK31)","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"We have set the time step size to 001. We have also specified that the Runge-Kutta method to be used is a third-order method, RK31, specially designed for storing as few different versions of the integrating factor as necessary. This is actually the default method, so we could have omitted this keyword argument. There are other choices, as well, such as TimeMarching.Euler for the forward Euler method.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Now we can solve the system. The integrator has a simple form, accepting as arguments the current time and state, and returning the updated versions of these at the end of the step. We place this integrator inside of a loop and store the results. (Since u is set up   as a 1-element vector, then we will store only the element of this vector.)","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"uhist = Float64[]; # for storing the solution\nT = 0:Δt:10;\nt = 0.0;\nfor ti in T\n  push!(uhist,u[1]) # storage\n  global t, u = ifrk(t,u) # advancement by one step by the integrator\nend","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Now we can plot the result and compare it with the exact solution.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"plot(T,uhist,label=\"numerical\",xlabel=\"t\",ylabel=\"u(t)\")\nplot!(T,uex.(T),label=\"exact soln\")\nsavefig(\"ifrk.svg\"); nothing # hide","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"(Image: )","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"As we can see, the results are nearly indistinguishable.","category":"page"},{"location":"manual/timemarching/#Constrained-systems-1","page":"Time marching","title":"Constrained systems","text":"","category":"section"},{"location":"manual/timemarching/#Constrained-integrating-factor-systems-1","page":"Time marching","title":"Constrained integrating factor systems","text":"","category":"section"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Constrained integrating factor systems that we encounter in ViscousFlow are of the form","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"ddt u = A u - B_1^T f + r_1(ut) quad B_2 u = r_2(ut) quad u(0) = u_0","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"where f is again the Lagrange multiplier for enforcing the constraints on u. Now, we combine the ideas of the last two sections into a single integrator.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Let's demonstrate this on the example of heat diffusion from a circular ring whose temperature is held constant. In this case, A is the discrete Laplace operator, L, times the heat diffusivity, r_1 is zero (in the absence of volumetric heating sources), and r_2 is the temperature of the ring. The operators B_1^T and B_2 will be the regularization and interpolation operators between discrete point-wise data on the ring and the field data.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"The ring will have radius 12 and fixed temperature 1, and the heat diffusivity is 1. (In other words, the problem has been non-dimensionalized by the diameter of the circle, the dimensional ring temperature, and the dimensional diffusivity.)","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"First, we will construct a field to accept the temperature on","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"nx = 129; ny = 129; Lx = 2.0; Δx = Lx/(nx-2);\nu₀ = Nodes(Dual,(nx,ny)); # field initial condition","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Now set up a ring of points on the circle at center (11).","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"n = 128; θ = range(0,stop=2π,length=n+1);\nR = 0.5; xb = 1.0 .+ R*cos.(θ); yb = 1.0 .+ R*sin.(θ);\nX = VectorData(xb[1:n],yb[1:n]);\nf = ScalarData(X); # to be used as the Lagrange multiplier","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"From this, construct the regularization and interpolation operators in their usual symmetric form, and then set up a routine that will provide these operators inside the integrator:","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"reg = Regularize(X,Δx;issymmetric=true)\nHmat, Emat = RegularizationMatrix(reg,f,u₀);\nplan_constraints(u::Nodes{Dual,nx,ny},t::Float64) = Hmat, Emat","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Now set up the right-hand side operators. Both must take the standard form, with arguments of the types of u and t. For r_1, we will simply set it to a field of zeros in the same type as u. For r_2, we set the result uniformly to 1.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"r₁(u::Nodes{T,NX,NY},t::Float64) where {T,NX,NY} = Nodes(T,u); # sets to zeros\nr₂(u::Nodes{T,NX,NY},t::Float64) where {T,NX,NY} = 1.0; # sets uniformly to 1.0","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"We will set the time-step size to a large value (10) for demonstration purposes. The method remains stable for any choice. We also initialize time t and the state u:","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Δt = 1.0;\nt = 0.0;\nu = deepcopy(u₀);","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Now we can construct the integrator. We supply examples for the state u and the Lagrange multiplier data f, the time-step size, the constructor for the integrating factor, a tuple of the operators for computing the actions of B_1^T and B_2 on data of type f and u, respectively (which, in this case, are matrices Hmat and Emat), and a tuple of the right-hand side functions.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"ifherk = IFHERK(u,f,Δt,plan_intfact,plan_constraints,(r₁,r₂),rk=TimeMarching.Euler)","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Here we've set the method to forward Euler. The resulting integrator accepts as arguments the current time t and the current state u, and returns the time, state, and Lagrange multiplier data at the end of the time step.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Now, let's advance the system. We'll also time it.","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"@time for i = 1:20\n  global t, u, f = ifherk(t,u)\nend","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Now let's plot it","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"xg, yg = coordinates(u,dx=Δx);\nplot(xg,yg,u)\nplot!(xb,yb,linecolor=:black,linewidth=1.5)\nsavefig(\"ifherk.svg\"); nothing # hide","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"(Image: )","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"From a side view, we can see that it enforces the boundary condition:","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"plot(xg,u[65,:],xlabel=\"x\",ylabel=\"u(x,1)\")\nsavefig(\"ifherk-side.svg\"); nothing # hide","category":"page"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"(Image: )","category":"page"},{"location":"manual/timemarching/#Methods-1","page":"Time marching","title":"Methods","text":"","category":"section"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Modules = [TimeMarching]\nOrder   = [:type, :function]","category":"page"},{"location":"manual/timemarching/#ViscousFlow.TimeMarching.IFHERK","page":"Time marching","title":"ViscousFlow.TimeMarching.IFHERK","text":"IFHERK(u,f,Δt,plan_intfact,B₁ᵀ,B₂,r₁,r₂;[tol=1e-3],[issymmetric=false],[rk::RKParams=RK31])\n\nConstruct an integrator to advance a system of the form\n\ndu/dt - Au = -B₁ᵀf + r₁(u,t) B₂u = r₂(u,t)\n\nThe resulting integrator will advance the system (u,f) by one time step, Δt. The optional argument tol sets the tolerance of iterative saddle-point solution, if applicable.\n\nArguments\n\nu : example of state vector data\nf : example of constraint force vector data\nΔt : time-step size\nplan_intfact : constructor to set up integrating factor operator for A that             will act on type u (by left multiplication) and return same type as u\nplan_constraints : constructor to set up the\nB₁ᵀ : operator acting on type f and returning type u\nB₂ : operator acting on type u and returning type f\nr₁ : operator acting on type u and t and returning u\nr₂ : operator acting on type u and t and returning type f\n\n\n\n\n\n","category":"type"},{"location":"manual/timemarching/#ViscousFlow.TimeMarching.IFRK","page":"Time marching","title":"ViscousFlow.TimeMarching.IFRK","text":"IFRK(u,Δt,plan_intfact,r₁;[rk::RKParams=RK31])\n\nConstruct an integrator to advance a system of the form\n\ndu/dt - Au = r₁(u,t)\n\nThe resulting integrator will advance the state u by one time step, Δt.\n\nArguments\n\nu : example of state vector data\nΔt : time-step size\nplan_intfact : constructor to set up integrating factor operator for A that             will act on type u (by left multiplication) and return same type as u\nr₁ : operator acting on type u and t and returning u\n\n\n\n\n\n","category":"type"},{"location":"manual/timemarching/#ViscousFlow.TimeMarching.RK","page":"Time marching","title":"ViscousFlow.TimeMarching.RK","text":"RK(u,Δt,r₁;[rk::RKParams=RK31])\n\nConstruct an integrator to advance a system of the form\n\ndu/dt = r₁(u,t)\n\nThe resulting integrator will advance the state u by one time step, Δt.\n\nArguments\n\nu : example of state vector data\nΔt : time-step size\nr₁ : operator acting on type u and t and returning u\n\n\n\n\n\n","category":"type"},{"location":"manual/timemarching/#ViscousFlow.TimeMarching.System","page":"Time marching","title":"ViscousFlow.TimeMarching.System","text":"Abstract type for a system of ODEs\n\n\n\n\n\n","category":"type"},{"location":"manual/timemarching/#Index-1","page":"Time marching","title":"Index","text":"","category":"section"},{"location":"manual/timemarching/#","page":"Time marching","title":"Time marching","text":"Pages = [\"timemarching.md\"]","category":"page"},{"location":"#ViscousFlow.jl-1","page":"Home","title":"ViscousFlow.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"a framework for simulating viscous incompressible flows","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The objective of this package is to allow easy setup and fast simulation of incompressible flows, particularly those past bodies in motion. The package provides tools for","category":"page"},{"location":"#","page":"Home","title":"Home","text":"constructing grids and body shapes,\nusing the operators on those grids,\nspecifying the relevant parameters and setting their values,\nsolving the problem, and finally,\nvisualizing and analyzing the results.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The underlying grids are uniform and Cartesian, allowing the use of the lattice Green's function (LGF) for inverting the Poisson equation; the diffusion operators are solved with the integrating factor (Liska and Colonius [1]). Many of the core aspects of the fluid-body interaction are based on the immersed boundary projection method, developed by Taira and Colonius [2]. The coupled fluid-body interactions are based on the work of Wang and Eldredge [3].","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(Image: )","category":"page"},{"location":"#Installation-1","page":"Home","title":"Installation","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This package works on Julia 0.6, 0.7 and 1.0 and is registered in the general Julia registry. To install in julia 0.6, type","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> Pkg.add(\"ViscousFlow\")","category":"page"},{"location":"#","page":"Home","title":"Home","text":"in the Julia REPL.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"In julia 0.7 or 1.0, enter the package manager by typing ] and then type, e.g.,","category":"page"},{"location":"#","page":"Home","title":"Home","text":"(v1.0) pkg> add ViscousFlow","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Then, in any version, type","category":"page"},{"location":"#","page":"Home","title":"Home","text":"julia> using ViscousFlow","category":"page"},{"location":"#","page":"Home","title":"Home","text":"The plots in this documentation are generated using Plots.jl. You might want to install that, too, to follow the examples.","category":"page"},{"location":"#References-1","page":"Home","title":"References","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"[1]: Liska, S. and Colonius, T. (2017) \"A fast immersed boundary method for external incompressible viscous flows using lattice Green's functions,\" J. Comput. Phys., 331, 257–279.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[2]: Taira, K. and Colonius, T. (2007) \"The immersed boundary method: a projection approach,\" J. Comput. Phys., 225, 2118–2137.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"[3]: Wang, C. and Eldredge, J. D. (2015) \"Strongly coupled dynamics of fluids and rigid-body systems with the immersed boundary projection method,\" J. Comput. Phys., 295, 87–113. (DOI).","category":"page"},{"location":"manual/bodies/#Bodies-1","page":"Bodies","title":"Bodies","text":"","category":"section"},{"location":"manual/bodies/#","page":"Bodies","title":"Bodies","text":"DocTestSetup = quote\nusing ViscousFlow\nusing Random\nRandom.seed!(1)\nend","category":"page"},{"location":"manual/bodies/#","page":"Bodies","title":"Bodies","text":"using ViscousFlow\nusing Plots","category":"page"},{"location":"manual/bodies/#Methods-1","page":"Bodies","title":"Methods","text":"","category":"section"},{"location":"manual/bodies/#","page":"Bodies","title":"Bodies","text":"Modules = [Bodies]\nOrder   = [:type, :function]","category":"page"},{"location":"manual/bodies/#ViscousFlow.Bodies.BasicBody","page":"Bodies","title":"ViscousFlow.Bodies.BasicBody","text":"BasicBody(x,y) <: Body\n\nConstruct a body by simply passing in the x and y coordinate vectors. The last point will be automatically connected to the first point. The coordinate vectors are assumed to be expressed in the body-fixed coordinate system.\n\n\n\n\n\n","category":"type"},{"location":"manual/bodies/#ViscousFlow.Bodies.Ellipse","page":"Bodies","title":"ViscousFlow.Bodies.Ellipse","text":"Ellipse(a,b,n) <: Body\n\nConstruct an elliptical body with semi-major axis a and semi-minor axis b, with n points distributed on the body perimeter.\n\n\n\n\n\n","category":"type"},{"location":"manual/bodies/#ViscousFlow.Bodies.NACA4","page":"Bodies","title":"ViscousFlow.Bodies.NACA4","text":"NACA4(cam,pos,thick[;np=20][,Xc=(0.0,0.0)][,len=1.0]) <: Body{N}\n\nGenerates points in the shape of a NACA 4-digit airfoil of chord length 1. The relative camber is specified by cam, the position of maximum camber (as fraction of chord) by pos, and the relative thickness by thick.\n\nThe optional parameter np specifies the number of points on the upper or lower surface. The optional parameter Zc specifies the mean position of the vertices (which is set to the origin by default). The optional parameter len specifies the chord length.\n\nExample\n\njulia> w = Bodies.NACA4(0.0,0.0,0.12);\n\n\n\n\n\n","category":"type"},{"location":"manual/bodies/#ViscousFlow.Bodies.Plate","page":"Bodies","title":"ViscousFlow.Bodies.Plate","text":"Plate(length,thick,n,[λ=1.0]) <: Body\n\nConstruct a flat plate with length length and thickness thick, with n points distributed on the body perimeter.\n\nThe optional parameter λ distributes the points differently. Values between 0.0 and 1.0 are accepted.\n\nThe constructor Plate(length,n,[λ=1.0]) creates a plate of zero thickness.\n\n\n\n\n\n","category":"type"},{"location":"manual/bodies/#ViscousFlow.Bodies.Rectangle","page":"Bodies","title":"ViscousFlow.Bodies.Rectangle","text":"Rectangle(a,b,na) <: Body\n\nConstruct a rectangular body with x̃ side half-length a and ỹ side half-length b, with na points distributed on the x̃ side (including both corners). The centroid of the rectangle is placed at the origin (so that the lower left corner is at (-a,-b)).\n\n\n\n\n\n","category":"type"},{"location":"manual/bodies/#ViscousFlow.Bodies.RigidTransform","page":"Bodies","title":"ViscousFlow.Bodies.RigidTransform","text":"RigidTransform(x::Tuple{Float64,Float64},α::Float64)\n\nConstruct a rigid-body transform operator, with rotation by angle α and translation specified by x. The translation coordinates are specified in the target coordinate system.\n\nThe resulting transform can be used as an operator on pairs of coordinate vectors, x and y, or on bodies. For transformation of bodies, it only overwrites the x and y fields of the body, but leaves the x̃ and ỹ (body coordinates) intact.\n\nThe translation can be provided as either a tuple (x,y) or as a complex number.\n\nConstructors\n\nRigidTransform((x,y),α)\nRigidTransform(u::Vector{Float64})\nRigidTransform(u::NTuple{3,Float64})\nRigidTransform.(u) where u is a collection of vectors or tuples.\n\nExample\n\njulia> body = Bodies.Ellipse(0.5,0.1,100)\nElliptical body with 100 points and semi-axes (0.5,0.1)\n   Current position: (0.0,0.0)\n   Current angle (rad): 0.0\n\njulia> T = RigidTransform((1.0,1.0),π/4)\nRigid-body transform\n  Translation: (1.0,1.0)\n  Rotation angle (rad): 0.7853981633974483\n\njulia> T(body)\nElliptical body with 100 points and semi-axes (0.5,0.1)\n   Current position: (1.0,1.0)\n   Current angle (rad): 0.7853981633974483\n\n\n\n\n\n","category":"type"},{"location":"manual/bodies/#ViscousFlow.Bodies.Circle-Tuple{Float64,Int64}","page":"Bodies","title":"ViscousFlow.Bodies.Circle","text":"Circle(a,n) <: Body\n\nConstruct a circular body with radius a and with n points distributed on the body perimeter.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#ViscousFlow.Bodies.SplinedBody-Tuple{Array{Float64,2},Float64}","page":"Bodies","title":"ViscousFlow.Bodies.SplinedBody","text":"SplinedBody(X,Δx) -> BasicBody\n\nUsing control points in X (assumed to be N x 2, where N is the number of points), create a set of points that are uniformly spaced (with spacing Δx) on a curve that passes through the control points. A cubic parametric spline algorithm is used.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#ViscousFlow.Bodies.Square-Tuple{Real,Int64}","page":"Bodies","title":"ViscousFlow.Bodies.Square","text":"Square(a,na) <: Body\n\nConstruct a square body with side half-length a and with na points distributed on each side (including both corners).\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#ViscousFlow.Bodies.centraldiff-Union{Tuple{Body{N}}, Tuple{N}} where N","page":"Bodies","title":"ViscousFlow.Bodies.centraldiff","text":"centraldiff(body::Body/BodyList) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the circular central differences of coordinates on body body (or on each body in list body).\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#ViscousFlow.Bodies.dlength-Tuple{Union{BodyList, Body}}","page":"Bodies","title":"ViscousFlow.Bodies.dlength","text":"dlength(body::Body/BodyList) -> Vector{Float64}\n\nCompute the lengths of the faces on the perimeter of body body, whose ends are at the current x and y coordinates (in inertial space) of the body. Face 1 corresponds to the face between points 1 and 2, for example.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#ViscousFlow.Bodies.dlengthmid-Tuple{Union{BodyList, Body}}","page":"Bodies","title":"ViscousFlow.Bodies.dlengthmid","text":"dlengthmid(body::Body/BodyList) -> Vector{Float64}\n\nCompute the lengths of the faces formed between the face midpoints on the perimeter of body body. The indexing of these midpoint faces is consistent with that of the regular vertex points adjacent to both midpoints. Midpoint face 2 corresponds to the face between midpoints 1 and 2, for example.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#ViscousFlow.Bodies.getrange-Tuple{BodyList,Int64}","page":"Bodies","title":"ViscousFlow.Bodies.getrange","text":"getrange(bl::BodyList,i::Int) -> Range\n\nReturn the range of indices in the global set of Lagrange point data corresponding to body i in body list bl.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#ViscousFlow.Bodies.midpoints-Union{Tuple{Body{N}}, Tuple{N}} where N","page":"Bodies","title":"ViscousFlow.Bodies.midpoints","text":"midpoints(body::Body/BodyList) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the x and y midpoints of the faces on the perimeter of body body, whose ends are at the current x and y coordinates (in inertial space) of the body. Face 1 corresponds to the face between points 1 and 2, for example.\n\nIf body is a BodyList, then it computes the differences separately on each constituent body.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#ViscousFlow.Bodies.normal-Tuple{Union{BodyList, Body}}","page":"Bodies","title":"ViscousFlow.Bodies.normal","text":"normal(body::Body/BodyList) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the current normals (in inertial components) of the faces on the perimeter of body body, whose ends are at the current x and y coordinates (in inertial space) of the body. Face 1 corresponds to the face between points 1 and 2, for example.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#ViscousFlow.Bodies.normalmid-Tuple{Union{BodyList, Body}}","page":"Bodies","title":"ViscousFlow.Bodies.normalmid","text":"normalmid(body::Body/BodyList) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the current normals (in inertial components) of the faces formed between midpoints on the perimeter of body body (or each body in list body).\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#Base.collect-Tuple{BodyList}","page":"Bodies","title":"Base.collect","text":"collect(bl::bodylist) -> Vector{Float64}, Vector{Float64}\n\nCollect the inertial-space coordinates of all of the Lagrange points comprising the bodies in body list bl and return each assembled set of coordinates as a vector.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#Base.diff-Union{Tuple{Body{N}}, Tuple{N}} where N","page":"Bodies","title":"Base.diff","text":"diff(body::Body/BodyList) -> Tuple{Vector{Float64},Vector{Float64}}\n\nCompute the x and y differences of the faces on the perimeter of body body, whose ends are at the current x and y coordinates (in inertial space) of the body. Face 1 corresponds to the face between points 1 and 2, for example.\n\nIf body is a BodyList, then it computes the differences separately on each constituent body.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#Base.length-Union{Tuple{Body{N}}, Tuple{N}} where N","page":"Bodies","title":"Base.length","text":"length(body::Body)\n\nReturn the number of points on the body perimeter\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#Base.sum-Tuple{AbstractArray{T,1} where T,BodyList,Int64}","page":"Bodies","title":"Base.sum","text":"sum(f::AbstractVector,bl::BodyList,i::Int) -> Real\n\nCompute a sum of the elements of vector f corresponding to body i in body list bl.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#Base.vec-Tuple{RigidTransform}","page":"Bodies","title":"Base.vec","text":"vec(T::RigidTransform) -> Vector{Float64}\n\nReturns a length-3 vector of the form [x,y,α] corresponding to the translation and rotation specified by the given transform T.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#Base.vec-Union{Tuple{Union{Array{RigidTransform,1}, Tuple{Vararg{RigidTransform,N}}}}, Tuple{N}} where N","page":"Bodies","title":"Base.vec","text":"vec(tl::Vector{RigidTransform}) -> NTuple{N,Vector{Float64}}\n\nReturns a tuple of length-3 vectors of the form [x,y,α] corresponding to the translation and rotation specified by the given by the list of transforms tl.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#Base.view-Tuple{AbstractArray{T,1} where T,BodyList,Int64}","page":"Bodies","title":"Base.view","text":"view(f::AbstractVector,bl::BodyList,i::Int) -> SubArray\n\nProvide a view of the range of values in vector f corresponding to the Lagrange points of the body with index i in body list bl.\n\n\n\n\n\n","category":"method"},{"location":"manual/bodies/#Index-1","page":"Bodies","title":"Index","text":"","category":"section"},{"location":"manual/bodies/#","page":"Bodies","title":"Bodies","text":"Pages = [\"bodies.md\"]","category":"page"}]
}
